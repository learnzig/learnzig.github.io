import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.gI2xCOxE.js";const d=JSON.parse('{"title":"Switch","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"basic/process_control/switch.md","filePath":"basic/process_control/switch.md","lastUpdated":1700294602000}'),p={name:"basic/process_control/switch.md"},o=l(`<h1 id="switch" tabindex="-1">Switch <a class="header-anchor" href="#switch" aria-label="Permalink to &quot;Switch&quot;">​</a></h1><p>switch 语句可以进行匹配，并且switch匹配不能出现遗漏匹配的情况。</p><h2 id="基本使用" tabindex="-1">基本使用 <a class="header-anchor" href="#基本使用" aria-label="Permalink to &quot;基本使用&quot;">​</a></h2><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-LKMOI" id="tab-ZSuiqUH" checked="checked"><label for="tab-ZSuiqUH">default</label><input type="radio" name="group-LKMOI" id="tab-wr3oqDz"><label for="tab-wr3oqDz">more</label></div><div class="blocks"><div class="language-zig vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">zig</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">num</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">u8</span><span style="color:#E1E4E8;"> = </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">switch</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">num</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;"> =&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;this is 5</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, .{});</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> =&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;this is not 5</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, .{});</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> </span><span style="color:#E36209;">num</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">u8</span><span style="color:#24292E;"> = </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">switch</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">num</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">5</span><span style="color:#24292E;"> =&gt; {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;this is 5</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, .{});</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> =&gt; {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;this is not 5</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, .{});</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><div class="language-zig vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">zig</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">std</span><span style="color:#E1E4E8;"> = </span><span style="color:#79B8FF;">@import</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;std&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">print</span><span style="color:#E1E4E8;"> = </span><span style="color:#FFAB70;">std</span><span style="color:#E1E4E8;">.</span><span style="color:#FFAB70;">debug</span><span style="color:#E1E4E8;">.</span><span style="color:#FFAB70;">print</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">pub</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">!void</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">num</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">u8</span><span style="color:#E1E4E8;"> = </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">switch</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">num</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;"> =&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;this is 5</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, .{});</span></span>
<span class="line"><span style="color:#E1E4E8;">        },</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> =&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;this is not 5</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, .{});</span></span>
<span class="line"><span style="color:#E1E4E8;">        },</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#E36209;">std</span><span style="color:#24292E;"> = </span><span style="color:#005CC5;">@import</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;std&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#E36209;">print</span><span style="color:#24292E;"> = </span><span style="color:#E36209;">std</span><span style="color:#24292E;">.</span><span style="color:#E36209;">debug</span><span style="color:#24292E;">.</span><span style="color:#E36209;">print</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">pub</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">fn</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">!void</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> </span><span style="color:#E36209;">num</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">u8</span><span style="color:#24292E;"> = </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">switch</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">num</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">5</span><span style="color:#24292E;"> =&gt; {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;this is 5</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, .{});</span></span>
<span class="line"><span style="color:#24292E;">        },</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> =&gt; {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;this is not 5</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, .{});</span></span>
<span class="line"><span style="color:#24292E;">        },</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div></div></div><div class="info custom-block"><p class="custom-block-title">🅿️ 提示</p><p>switch 的匹配必须要要穷尽所有，或者具有 <code>else</code> 分支！</p></div><h2 id="进阶使用" tabindex="-1">进阶使用 <a class="header-anchor" href="#进阶使用" aria-label="Permalink to &quot;进阶使用&quot;">​</a></h2><p>switch 还支持用 <code>,</code> 分割的多匹配、<code>...</code> 的范围选择符，类似循环中的 <code>tag</code> 语法、编译期表达式，以下是演示：</p><div class="language-zig vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">zig</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">a</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">u64</span><span style="color:#E1E4E8;"> = </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">zz</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">u64</span><span style="color:#E1E4E8;"> = </span><span style="color:#79B8FF;">103</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 作为表达式使用</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">b</span><span style="color:#E1E4E8;"> = </span><span style="color:#F97583;">switch</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">a</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 多匹配项</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;"> =&gt; </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 范围匹配</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">...</span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;"> =&gt; </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// tag形式的分配匹配，可以任意复杂</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">101</span><span style="color:#E1E4E8;"> =&gt; </span><span style="color:#FFAB70;">blk</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">c</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">u64</span><span style="color:#E1E4E8;"> = </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 下一行代表返回到blk这个tag处</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;"> :</span><span style="color:#FFAB70;">blk</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">c</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">zz</span><span style="color:#E1E4E8;"> =&gt; </span><span style="color:#FFAB70;">zz</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 支持编译期运算</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">blk</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">d</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">u32</span><span style="color:#E1E4E8;"> = </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">u32</span><span style="color:#E1E4E8;"> = </span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;"> :</span><span style="color:#FFAB70;">blk</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">d</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    } =&gt; </span><span style="color:#79B8FF;">107</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// else 匹配剩余的分支</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> =&gt; </span><span style="color:#79B8FF;">9</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">expect</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">b</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#E36209;">a</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">u64</span><span style="color:#24292E;"> = </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#E36209;">zz</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">u64</span><span style="color:#24292E;"> = </span><span style="color:#005CC5;">103</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 作为表达式使用</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#E36209;">b</span><span style="color:#24292E;"> = </span><span style="color:#D73A49;">switch</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">a</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 多匹配项</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;"> =&gt; </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 范围匹配</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">...</span><span style="color:#005CC5;">100</span><span style="color:#24292E;"> =&gt; </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// tag形式的分配匹配，可以任意复杂</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">101</span><span style="color:#24292E;"> =&gt; </span><span style="color:#E36209;">blk</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#E36209;">c</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">u64</span><span style="color:#24292E;"> = </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 下一行代表返回到blk这个tag处</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">break</span><span style="color:#24292E;"> :</span><span style="color:#E36209;">blk</span><span style="color:#24292E;"> </span><span style="color:#E36209;">c</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">zz</span><span style="color:#24292E;"> =&gt; </span><span style="color:#E36209;">zz</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 支持编译期运算</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">blk</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#E36209;">d</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">u32</span><span style="color:#24292E;"> = </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#E36209;">e</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">u32</span><span style="color:#24292E;"> = </span><span style="color:#005CC5;">100</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">break</span><span style="color:#24292E;"> :</span><span style="color:#E36209;">blk</span><span style="color:#24292E;"> </span><span style="color:#E36209;">d</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#E36209;">e</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    } =&gt; </span><span style="color:#005CC5;">107</span><span style="color:#24292E;">,</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// else 匹配剩余的分支</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> =&gt; </span><span style="color:#005CC5;">9</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">try</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">expect</span><span style="color:#24292E;">(</span><span style="color:#E36209;">b</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span></code></pre></div><h3 id="作为表达式使用" tabindex="-1">作为表达式使用： <a class="header-anchor" href="#作为表达式使用" aria-label="Permalink to &quot;作为表达式使用：&quot;">​</a></h3><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-RSuax" id="tab-nulq6NX" checked="checked"><label for="tab-nulq6NX">default</label><input type="radio" name="group-RSuax" id="tab-99yodSQ"><label for="tab-99yodSQ">more</label></div><div class="blocks"><div class="language-zig vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">zig</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">os_msg</span><span style="color:#E1E4E8;"> = </span><span style="color:#F97583;">switch</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">builtin</span><span style="color:#E1E4E8;">.</span><span style="color:#FFAB70;">target</span><span style="color:#E1E4E8;">.</span><span style="color:#FFAB70;">os</span><span style="color:#E1E4E8;">.</span><span style="color:#FFAB70;">tag</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#FFAB70;">linux</span><span style="color:#E1E4E8;"> =&gt; </span><span style="color:#9ECBFF;">&quot;we found a linux user&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> =&gt; </span><span style="color:#9ECBFF;">&quot;not a linux user&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#E36209;">os_msg</span><span style="color:#24292E;"> = </span><span style="color:#D73A49;">switch</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">builtin</span><span style="color:#24292E;">.</span><span style="color:#E36209;">target</span><span style="color:#24292E;">.</span><span style="color:#E36209;">os</span><span style="color:#24292E;">.</span><span style="color:#E36209;">tag</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#E36209;">linux</span><span style="color:#24292E;"> =&gt; </span><span style="color:#032F62;">&quot;we found a linux user&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> =&gt; </span><span style="color:#032F62;">&quot;not a linux user&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><div class="language-zig vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">zig</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">builtin</span><span style="color:#E1E4E8;"> = </span><span style="color:#79B8FF;">@import</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;builtin&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">pub</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">!void</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">os_msg</span><span style="color:#E1E4E8;"> = </span><span style="color:#F97583;">switch</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">builtin</span><span style="color:#E1E4E8;">.</span><span style="color:#FFAB70;">target</span><span style="color:#E1E4E8;">.</span><span style="color:#FFAB70;">os</span><span style="color:#E1E4E8;">.</span><span style="color:#FFAB70;">tag</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#FFAB70;">linux</span><span style="color:#E1E4E8;"> =&gt; </span><span style="color:#9ECBFF;">&quot;we found a linux user&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> =&gt; </span><span style="color:#9ECBFF;">&quot;not a linux user&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    };</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">_</span><span style="color:#E1E4E8;"> = </span><span style="color:#FFAB70;">os_msg</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#E36209;">builtin</span><span style="color:#24292E;"> = </span><span style="color:#005CC5;">@import</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;builtin&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">pub</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">fn</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">!void</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#E36209;">os_msg</span><span style="color:#24292E;"> = </span><span style="color:#D73A49;">switch</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">builtin</span><span style="color:#24292E;">.</span><span style="color:#E36209;">target</span><span style="color:#24292E;">.</span><span style="color:#E36209;">os</span><span style="color:#24292E;">.</span><span style="color:#E36209;">tag</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#E36209;">linux</span><span style="color:#24292E;"> =&gt; </span><span style="color:#032F62;">&quot;we found a linux user&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> =&gt; </span><span style="color:#032F62;">&quot;not a linux user&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    };</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">_</span><span style="color:#24292E;"> = </span><span style="color:#E36209;">os_msg</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div></div></div><h3 id="捕获-tag-union" tabindex="-1">捕获 <code>Tag Union</code> <a class="header-anchor" href="#捕获-tag-union" aria-label="Permalink to &quot;捕获 \`Tag Union\`&quot;">​</a></h3><p>我们还可以使用 switch 对标记联合类型进行捕获操作，对字段值的修改可以通过在捕获变量名称之前放置 <code>*</code> 并将其转换为指针来完成：</p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-bF93W" id="tab-VaaroPe" checked="checked"><label for="tab-VaaroPe">default</label><input type="radio" name="group-bF93W" id="tab-P3tI0wW"><label for="tab-P3tI0wW">more</label></div><div class="blocks"><div class="language-zig vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">zig</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">Item</span><span style="color:#E1E4E8;"> = </span><span style="color:#F97583;">union</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">enum</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">a</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">u32</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">c</span><span style="color:#E1E4E8;">: </span><span style="color:#FFAB70;">Point</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">d</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">u32</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">a</span><span style="color:#E1E4E8;"> = </span><span style="color:#FFAB70;">Item</span><span style="color:#E1E4E8;">{ .</span><span style="color:#FFAB70;">c</span><span style="color:#E1E4E8;"> = </span><span style="color:#FFAB70;">Point</span><span style="color:#E1E4E8;">{ .</span><span style="color:#FFAB70;">x</span><span style="color:#E1E4E8;"> = </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, .</span><span style="color:#FFAB70;">y</span><span style="color:#E1E4E8;"> = </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> } };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">b</span><span style="color:#E1E4E8;"> = </span><span style="color:#F97583;">switch</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">a</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 多个匹配</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">Item</span><span style="color:#E1E4E8;">.</span><span style="color:#FFAB70;">a</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">Item</span><span style="color:#E1E4E8;">.</span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;"> =&gt; </span><span style="color:#F97583;">|</span><span style="color:#FFAB70;">item</span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">item</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 可以使用 * 语法来捕获对应的指针进行修改操作</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">Item</span><span style="color:#E1E4E8;">.</span><span style="color:#FFAB70;">c</span><span style="color:#E1E4E8;"> =&gt; </span><span style="color:#F97583;">|*</span><span style="color:#FFAB70;">item</span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">blk</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#FFAB70;">item</span><span style="color:#E1E4E8;">.</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">.</span><span style="color:#FFAB70;">x</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;"> :</span><span style="color:#FFAB70;">blk</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">6</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 这里最后一个联合类型,匹配已经穷尽了，我们就不需要使用else了</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">Item</span><span style="color:#E1E4E8;">.</span><span style="color:#FFAB70;">d</span><span style="color:#E1E4E8;"> =&gt; </span><span style="color:#79B8FF;">8</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#E36209;">Item</span><span style="color:#24292E;"> = </span><span style="color:#D73A49;">union</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">enum</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">a</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">u32</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">c</span><span style="color:#24292E;">: </span><span style="color:#E36209;">Point</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">d</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">e</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">u32</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> </span><span style="color:#E36209;">a</span><span style="color:#24292E;"> = </span><span style="color:#E36209;">Item</span><span style="color:#24292E;">{ .</span><span style="color:#E36209;">c</span><span style="color:#24292E;"> = </span><span style="color:#E36209;">Point</span><span style="color:#24292E;">{ .</span><span style="color:#E36209;">x</span><span style="color:#24292E;"> = </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, .</span><span style="color:#E36209;">y</span><span style="color:#24292E;"> = </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> } };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#E36209;">b</span><span style="color:#24292E;"> = </span><span style="color:#D73A49;">switch</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">a</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 多个匹配</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">Item</span><span style="color:#24292E;">.</span><span style="color:#E36209;">a</span><span style="color:#24292E;">, </span><span style="color:#E36209;">Item</span><span style="color:#24292E;">.</span><span style="color:#E36209;">e</span><span style="color:#24292E;"> =&gt; </span><span style="color:#D73A49;">|</span><span style="color:#E36209;">item</span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#E36209;">item</span><span style="color:#24292E;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 可以使用 * 语法来捕获对应的指针进行修改操作</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">Item</span><span style="color:#24292E;">.</span><span style="color:#E36209;">c</span><span style="color:#24292E;"> =&gt; </span><span style="color:#D73A49;">|*</span><span style="color:#E36209;">item</span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#E36209;">blk</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#E36209;">item</span><span style="color:#24292E;">.</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">.</span><span style="color:#E36209;">x</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">break</span><span style="color:#24292E;"> :</span><span style="color:#E36209;">blk</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">6</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 这里最后一个联合类型,匹配已经穷尽了，我们就不需要使用else了</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">Item</span><span style="color:#24292E;">.</span><span style="color:#E36209;">d</span><span style="color:#24292E;"> =&gt; </span><span style="color:#005CC5;">8</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><div class="language-zig vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">zig</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">std</span><span style="color:#E1E4E8;"> = </span><span style="color:#79B8FF;">@import</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;std&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">pub</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">!void</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">Point</span><span style="color:#E1E4E8;"> = </span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#FFAB70;">x</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">u8</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#FFAB70;">y</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">u8</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    };</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">Item</span><span style="color:#E1E4E8;"> = </span><span style="color:#F97583;">union</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">enum</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#FFAB70;">a</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">u32</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#FFAB70;">c</span><span style="color:#E1E4E8;">: </span><span style="color:#FFAB70;">Point</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#FFAB70;">d</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">u32</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">a</span><span style="color:#E1E4E8;"> = </span><span style="color:#FFAB70;">Item</span><span style="color:#E1E4E8;">{ .</span><span style="color:#FFAB70;">c</span><span style="color:#E1E4E8;"> = </span><span style="color:#FFAB70;">Point</span><span style="color:#E1E4E8;">{ .</span><span style="color:#FFAB70;">x</span><span style="color:#E1E4E8;"> = </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, .</span><span style="color:#FFAB70;">y</span><span style="color:#E1E4E8;"> = </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> } };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">b</span><span style="color:#E1E4E8;"> = </span><span style="color:#F97583;">switch</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">a</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 多个匹配</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#FFAB70;">Item</span><span style="color:#E1E4E8;">.</span><span style="color:#FFAB70;">a</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">Item</span><span style="color:#E1E4E8;">.</span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;"> =&gt; </span><span style="color:#F97583;">|</span><span style="color:#FFAB70;">item</span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">item</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 可以使用 * 语法来捕获对应的指针进行修改操作</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#FFAB70;">Item</span><span style="color:#E1E4E8;">.</span><span style="color:#FFAB70;">c</span><span style="color:#E1E4E8;"> =&gt; </span><span style="color:#F97583;">|*</span><span style="color:#FFAB70;">item</span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">blk</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#FFAB70;">item</span><span style="color:#E1E4E8;">.</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">.</span><span style="color:#FFAB70;">x</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;"> :</span><span style="color:#FFAB70;">blk</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">6</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        },</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 这里最后一个联合类型,匹配已经穷尽了，我们就不需要使用else了</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#FFAB70;">Item</span><span style="color:#E1E4E8;">.</span><span style="color:#FFAB70;">d</span><span style="color:#E1E4E8;"> =&gt; </span><span style="color:#79B8FF;">8</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">std</span><span style="color:#E1E4E8;">.</span><span style="color:#FFAB70;">debug</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;{any}</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, .{</span><span style="color:#FFAB70;">b</span><span style="color:#E1E4E8;">});</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#E36209;">std</span><span style="color:#24292E;"> = </span><span style="color:#005CC5;">@import</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;std&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">pub</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">fn</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">!void</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#E36209;">Point</span><span style="color:#24292E;"> = </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#E36209;">x</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">u8</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#E36209;">y</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">u8</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    };</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#E36209;">Item</span><span style="color:#24292E;"> = </span><span style="color:#D73A49;">union</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">enum</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#E36209;">a</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">u32</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#E36209;">c</span><span style="color:#24292E;">: </span><span style="color:#E36209;">Point</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#E36209;">d</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#E36209;">e</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">u32</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> </span><span style="color:#E36209;">a</span><span style="color:#24292E;"> = </span><span style="color:#E36209;">Item</span><span style="color:#24292E;">{ .</span><span style="color:#E36209;">c</span><span style="color:#24292E;"> = </span><span style="color:#E36209;">Point</span><span style="color:#24292E;">{ .</span><span style="color:#E36209;">x</span><span style="color:#24292E;"> = </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, .</span><span style="color:#E36209;">y</span><span style="color:#24292E;"> = </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> } };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#E36209;">b</span><span style="color:#24292E;"> = </span><span style="color:#D73A49;">switch</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">a</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 多个匹配</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#E36209;">Item</span><span style="color:#24292E;">.</span><span style="color:#E36209;">a</span><span style="color:#24292E;">, </span><span style="color:#E36209;">Item</span><span style="color:#24292E;">.</span><span style="color:#E36209;">e</span><span style="color:#24292E;"> =&gt; </span><span style="color:#D73A49;">|</span><span style="color:#E36209;">item</span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#E36209;">item</span><span style="color:#24292E;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 可以使用 * 语法来捕获对应的指针进行修改操作</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#E36209;">Item</span><span style="color:#24292E;">.</span><span style="color:#E36209;">c</span><span style="color:#24292E;"> =&gt; </span><span style="color:#D73A49;">|*</span><span style="color:#E36209;">item</span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#E36209;">blk</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#E36209;">item</span><span style="color:#24292E;">.</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">.</span><span style="color:#E36209;">x</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">break</span><span style="color:#24292E;"> :</span><span style="color:#E36209;">blk</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">6</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        },</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 这里最后一个联合类型,匹配已经穷尽了，我们就不需要使用else了</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#E36209;">Item</span><span style="color:#24292E;">.</span><span style="color:#E36209;">d</span><span style="color:#24292E;"> =&gt; </span><span style="color:#005CC5;">8</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">std</span><span style="color:#24292E;">.</span><span style="color:#E36209;">debug</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;{any}</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, .{</span><span style="color:#E36209;">b</span><span style="color:#24292E;">});</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div></div></div><h3 id="对枚举类型进行自动推断" tabindex="-1">对枚举类型进行自动推断 <a class="header-anchor" href="#对枚举类型进行自动推断" aria-label="Permalink to &quot;对枚举类型进行自动推断&quot;">​</a></h3><p>在使用 switch 匹配时，也可以继续对枚举类型进行自动推断：</p><div class="language-zig vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">zig</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">Color</span><span style="color:#E1E4E8;"> = </span><span style="color:#F97583;">enum</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">auto</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">off</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">on</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">color</span><span style="color:#E1E4E8;"> = </span><span style="color:#FFAB70;">Color</span><span style="color:#E1E4E8;">.</span><span style="color:#FFAB70;">off</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#6A737D;">// 编译器会帮我们完成其余的工作</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">result</span><span style="color:#E1E4E8;"> = </span><span style="color:#F97583;">switch</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">color</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#FFAB70;">auto</span><span style="color:#E1E4E8;"> =&gt; </span><span style="color:#F97583;">false</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#FFAB70;">on</span><span style="color:#E1E4E8;"> =&gt; </span><span style="color:#F97583;">false</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#FFAB70;">off</span><span style="color:#E1E4E8;"> =&gt; </span><span style="color:#F97583;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#E36209;">Color</span><span style="color:#24292E;"> = </span><span style="color:#D73A49;">enum</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">auto</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">off</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">on</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#E36209;">color</span><span style="color:#24292E;"> = </span><span style="color:#E36209;">Color</span><span style="color:#24292E;">.</span><span style="color:#E36209;">off</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6A737D;">// 编译器会帮我们完成其余的工作</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#E36209;">result</span><span style="color:#24292E;"> = </span><span style="color:#D73A49;">switch</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">color</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#E36209;">auto</span><span style="color:#24292E;"> =&gt; </span><span style="color:#D73A49;">false</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#E36209;">on</span><span style="color:#24292E;"> =&gt; </span><span style="color:#D73A49;">false</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#E36209;">off</span><span style="color:#24292E;"> =&gt; </span><span style="color:#D73A49;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><h3 id="内联-switch" tabindex="-1">内联 switch <a class="header-anchor" href="#内联-switch" aria-label="Permalink to &quot;内联 switch&quot;">​</a></h3><p>switch 的分支可以标记为 <code>inline</code> 来要求编译器生成该分支对应的所有可能分支：</p><div class="language-zig vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">zig</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 这段函数用来判断一个结构体的字段是否是 optinal，同时它也是 comptime 的</span></span>
<span class="line"><span style="color:#6A737D;">// 故我们可以在下面使用inline 来要求编译器帮我们展开这个switch</span></span>
<span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">isFieldOptional</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">comptime</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">T</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">type</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">field_index</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">usize</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">!bool</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">fields</span><span style="color:#E1E4E8;"> = </span><span style="color:#79B8FF;">@typeInfo</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">T</span><span style="color:#E1E4E8;">).</span><span style="color:#FFAB70;">Struct</span><span style="color:#E1E4E8;">.</span><span style="color:#FFAB70;">fields</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">switch</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">field_index</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 这里每次都是不同的值</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">inline</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">...</span><span style="color:#FFAB70;">fields</span><span style="color:#E1E4E8;">.</span><span style="color:#FFAB70;">len</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> =&gt; </span><span style="color:#F97583;">|</span><span style="color:#FFAB70;">idx</span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">@typeInfo</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">fields</span><span style="color:#E1E4E8;">[</span><span style="color:#FFAB70;">idx</span><span style="color:#E1E4E8;">].</span><span style="color:#F97583;">type</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> .</span><span style="color:#FFAB70;">Optional</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> =&gt; </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">error</span><span style="color:#E1E4E8;">.</span><span style="color:#FFAB70;">IndexOutOfBounds</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    };</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 这段函数用来判断一个结构体的字段是否是 optinal，同时它也是 comptime 的</span></span>
<span class="line"><span style="color:#6A737D;">// 故我们可以在下面使用inline 来要求编译器帮我们展开这个switch</span></span>
<span class="line"><span style="color:#D73A49;">fn</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">isFieldOptional</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">comptime</span><span style="color:#24292E;"> </span><span style="color:#E36209;">T</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">type</span><span style="color:#24292E;">, </span><span style="color:#E36209;">field_index</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">usize</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">!bool</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#E36209;">fields</span><span style="color:#24292E;"> = </span><span style="color:#005CC5;">@typeInfo</span><span style="color:#24292E;">(</span><span style="color:#E36209;">T</span><span style="color:#24292E;">).</span><span style="color:#E36209;">Struct</span><span style="color:#24292E;">.</span><span style="color:#E36209;">fields</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">switch</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">field_index</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 这里每次都是不同的值</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">inline</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">...</span><span style="color:#E36209;">fields</span><span style="color:#24292E;">.</span><span style="color:#E36209;">len</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> =&gt; </span><span style="color:#D73A49;">|</span><span style="color:#E36209;">idx</span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">@typeInfo</span><span style="color:#24292E;">(</span><span style="color:#E36209;">fields</span><span style="color:#24292E;">[</span><span style="color:#E36209;">idx</span><span style="color:#24292E;">].</span><span style="color:#D73A49;">type</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> .</span><span style="color:#E36209;">Optional</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> =&gt; </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">error</span><span style="color:#24292E;">.</span><span style="color:#E36209;">IndexOutOfBounds</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    };</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><code>inline else</code> 可以展开所有的 else 分支，这样做的好处是，允许编译器在编译时显示生成所有分支，这样在编译时可以检查分支是否均能被正确地处理：</p><div class="language-zig vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">zig</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">withSwitch</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">any</span><span style="color:#E1E4E8;">: </span><span style="color:#FFAB70;">AnySlice</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">usize</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">switch</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">any</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">inline</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> =&gt; </span><span style="color:#F97583;">|</span><span style="color:#FFAB70;">slice</span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">slice</span><span style="color:#E1E4E8;">.</span><span style="color:#FFAB70;">len</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    };</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">fn</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">withSwitch</span><span style="color:#24292E;">(</span><span style="color:#E36209;">any</span><span style="color:#24292E;">: </span><span style="color:#E36209;">AnySlice</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">usize</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">switch</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">any</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">inline</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> =&gt; </span><span style="color:#D73A49;">|</span><span style="color:#E36209;">slice</span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#E36209;">slice</span><span style="color:#24292E;">.</span><span style="color:#E36209;">len</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    };</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>当使用 <code>inline else</code> 捕获 tag union 时，可以额外捕获 tag 和对应的 value：</p><div class="language-zig vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">zig</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">U</span><span style="color:#E1E4E8;"> = </span><span style="color:#F97583;">union</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">enum</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">a</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">u32</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">b</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">f32</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getNum</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">u</span><span style="color:#E1E4E8;">: </span><span style="color:#FFAB70;">U</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">u32</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">switch</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">u</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 这里 num 是一个运行时可知的值</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 而 tag 则是对应的标签名，这是编译期可知的</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">inline</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> =&gt; </span><span style="color:#F97583;">|</span><span style="color:#FFAB70;">num</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">tag</span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">tag</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> .</span><span style="color:#FFAB70;">b</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">@intFromFloat</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">num</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">num</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#E36209;">U</span><span style="color:#24292E;"> = </span><span style="color:#D73A49;">union</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">enum</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">a</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">u32</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">b</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">f32</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">fn</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getNum</span><span style="color:#24292E;">(</span><span style="color:#E36209;">u</span><span style="color:#24292E;">: </span><span style="color:#E36209;">U</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">u32</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">switch</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">u</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 这里 num 是一个运行时可知的值</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 而 tag 则是对应的标签名，这是编译期可知的</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">inline</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> =&gt; </span><span style="color:#D73A49;">|</span><span style="color:#E36209;">num</span><span style="color:#24292E;">, </span><span style="color:#E36209;">tag</span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">tag</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> .</span><span style="color:#E36209;">b</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">@intFromFloat</span><span style="color:#24292E;">(</span><span style="color:#E36209;">num</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#E36209;">num</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div>`,23),e=[o];function c(t,E,r,y,i,F){return n(),a("div",null,e)}const u=s(p,[["render",c]]);export{d as __pageData,u as default};
