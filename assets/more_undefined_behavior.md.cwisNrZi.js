import{_ as s,o as i,c as a,R as n}from"./chunks/framework.ERN2RLUQ.js";const F=JSON.parse('{"title":"未定义操作","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"more/undefined_behavior.md","filePath":"more/undefined_behavior.md","lastUpdated":1703559161000}'),t={name:"more/undefined_behavior.md"},e=n(`<h1 id="未定义操作" tabindex="-1">未定义操作 <a class="header-anchor" href="#未定义操作" aria-label="Permalink to &quot;未定义操作&quot;">​</a></h1><p>zig 本身有许多未定义行为，它们可以很方便地帮助开发者找出错误。</p><p>如果在编译期就检测到了未定义的行为，那么 zig 会发出编译错误并停止继续编译，大多数编译时无法检测到的未定义行为均会在运行时被检测到。这就是 zig 的安全检查！</p><p>安全检查会在debug、ReleaseSafe 模式下开启，但可以使用 <a href="https://ziglang.org/documentation/master/#setRuntimeSafety" target="_blank" rel="noreferrer"><code>@setRuntimeSafety</code></a> 来强制指定在单独的块中是否开启安全检查（这将忽略构建模式）。</p><p>当出现安全检查失败时，zig 会编译失败并触发堆栈跟踪：</p><div class="language-zig vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">zig</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">test</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;safety check&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    unreachable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> zig</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test_undefined_behavior.zig</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">1/1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test.safety</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> check...</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> thread</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 892159</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> panic:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> reached</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> unreachable</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> code</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">/home/ci/actions-runner/_work/zig-bootstrap/zig/docgen_tmp/test_undefined_behavior.zig:2:5:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0x222c65</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> in</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test.safety</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> check</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (test)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    unreachable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    ^</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">/home/ci/actions-runner/_work/zig-bootstrap/out/host/lib/zig/test_runner.zig:181:28:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0x22da7d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> in</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mainTerminal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (test)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> test_fn.func</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                           ^</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">/home/ci/actions-runner/_work/zig-bootstrap/out/host/lib/zig/test_runner.zig:36:28:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0x223c8a</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> in</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (test)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mainTerminal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                           ^</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">/home/ci/actions-runner/_work/zig-bootstrap/out/host/lib/zig/std/start.zig:575:22:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0x22319c</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> in</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> posixCallMainAndExit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (test)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            root.main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                     ^</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">/home/ci/actions-runner/_work/zig-bootstrap/out/host/lib/zig/std/start.zig:253:5:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0x222cf1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> in</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> _start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (test)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    asm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> volatile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (switch (native_arch) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    ^</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">???</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: 0x0 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ???</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">???</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">error:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> the</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> following</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> command</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> crashed:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">/home/ci/actions-runner/_work/zig-bootstrap/out/zig-local-cache/o/4558e134302b78f1a543202d094b3e06/test</span></span></code></pre></div><p>以下说明各种未定义行为。</p><h2 id="不可达代码" tabindex="-1">不可达代码 <a class="header-anchor" href="#不可达代码" aria-label="Permalink to &quot;不可达代码&quot;">​</a></h2><p>即 <code>unreachabel</code>，如果程序执行到它，那么会触发完整的堆栈跟踪！</p><h2 id="索引越界访问" tabindex="-1">索引越界访问 <a class="header-anchor" href="#索引越界访问" aria-label="Permalink to &quot;索引越界访问&quot;">​</a></h2><p>无论是数组还是切片，发生越界访问会发生错误导致程序终止进而触发堆栈跟踪！</p><h2 id="负数转换为无符号整数" tabindex="-1">负数转换为无符号整数 <a class="header-anchor" href="#负数转换为无符号整数" aria-label="Permalink to &quot;负数转换为无符号整数&quot;">​</a></h2><p>这本身就是非法行为，故会直接出现报错，如果仅仅是想要将负数当作无符号整数看待，可以使用 <a href="https://ziglang.org/documentation/master/#bitCast" target="_blank" rel="noreferrer"><code>@bitCast</code></a>。</p><p>如果想要获取到无符号整数的最大值，可以使用 <code>std.math.maxInt</code>。</p><h2 id="数据截断" tabindex="-1">数据截断 <a class="header-anchor" href="#数据截断" aria-label="Permalink to &quot;数据截断&quot;">​</a></h2><p>注意我们这里指的是数据类型的范围变小了，不足以容纳数据的值，例如：</p><div class="language-zig vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">zig</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> spartan_count</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">u16</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> = </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">300</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> byte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">u8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> = </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">@intCast</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">spartan_count</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>上面这段代码毫无疑问会失败，因为 <code>u8</code> 类型无法容纳下 300 这个数。</p><p>除非，我们显示强制截断位，使用 <a href="https://ziglang.org/documentation/master/#truncate" target="_blank" rel="noreferrer"><code>@truncate</code></a>。</p><h2 id="整数溢出" tabindex="-1">整数溢出 <a class="header-anchor" href="#整数溢出" aria-label="Permalink to &quot;整数溢出&quot;">​</a></h2><p>常规的运算可能导致溢出，如加 <code>+</code> 减 <code>-</code> 乘 <code>*</code> 除 <code>/</code> 取反 <code>-</code></p><h2 id="移位溢出" tabindex="-1">移位溢出 <a class="header-anchor" href="#移位溢出" aria-label="Permalink to &quot;移位溢出&quot;">​</a></h2><h2 id="除零操作" tabindex="-1">除零操作 <a class="header-anchor" href="#除零操作" aria-label="Permalink to &quot;除零操作&quot;">​</a></h2><h2 id="精确触发溢出" tabindex="-1">精确触发溢出 <a class="header-anchor" href="#精确触发溢出" aria-label="Permalink to &quot;精确触发溢出&quot;">​</a></h2><h2 id="尝试解开-null" tabindex="-1">尝试解开 Null <a class="header-anchor" href="#尝试解开-null" aria-label="Permalink to &quot;尝试解开 Null&quot;">​</a></h2><h2 id="尝试解开-error" tabindex="-1">尝试解开 Error <a class="header-anchor" href="#尝试解开-error" aria-label="Permalink to &quot;尝试解开 Error&quot;">​</a></h2><h2 id="无效错误码" tabindex="-1">无效错误码 <a class="header-anchor" href="#无效错误码" aria-label="Permalink to &quot;无效错误码&quot;">​</a></h2><h2 id="无效枚举转换" tabindex="-1">无效枚举转换 <a class="header-anchor" href="#无效枚举转换" aria-label="Permalink to &quot;无效枚举转换&quot;">​</a></h2><h2 id="无效错误集合转换" tabindex="-1">无效错误集合转换 <a class="header-anchor" href="#无效错误集合转换" aria-label="Permalink to &quot;无效错误集合转换&quot;">​</a></h2><h2 id="指针对齐错误" tabindex="-1">指针对齐错误 <a class="header-anchor" href="#指针对齐错误" aria-label="Permalink to &quot;指针对齐错误&quot;">​</a></h2><h2 id="联合类型字段访问错误" tabindex="-1">联合类型字段访问错误 <a class="header-anchor" href="#联合类型字段访问错误" aria-label="Permalink to &quot;联合类型字段访问错误&quot;">​</a></h2><h2 id="浮点转换整数发生越界" tabindex="-1">浮点转换整数发生越界 <a class="header-anchor" href="#浮点转换整数发生越界" aria-label="Permalink to &quot;浮点转换整数发生越界&quot;">​</a></h2><h2 id="指针强制转换为-null" tabindex="-1">指针强制转换为 Null <a class="header-anchor" href="#指针强制转换为-null" aria-label="Permalink to &quot;指针强制转换为 Null&quot;">​</a></h2>`,34),h=[e];function l(k,p,r,d,o,c){return i(),a("div",null,h)}const E=s(t,[["render",l]]);export{F as __pageData,E as default};
