import{_ as s,o as a,c as n,Q as p}from"./chunks/framework.01af844e.js";const u=JSON.parse('{"title":"字符与布尔值","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"basic/char-and-boolean.md","filePath":"basic/char-and-boolean.md"}'),o={name:"basic/char-and-boolean.md"},l=p(`<h1 id="字符与布尔值" tabindex="-1">字符与布尔值 <a class="header-anchor" href="#字符与布尔值" aria-label="Permalink to &quot;字符与布尔值&quot;">​</a></h1><blockquote><p>在计算机中定义的 <em>字符</em> 往往都是 <a href="https://en.wikipedia.org/wiki/ASCII" target="_blank" rel="noreferrer">ASCII</a> 码表的值，绝非我们平常所指的单个文字。</p><p>布尔值往往通过二进制的 0 和 1 来表示。</p></blockquote><h2 id="字符" tabindex="-1">字符 <a class="header-anchor" href="#字符" aria-label="Permalink to &quot;字符&quot;">​</a></h2><p>这个类型其实平常使用不算多，在 zig 中字符就是 <code>u8</code>，并且需要是 ASCII 码表中的内容,这和 C 的逻辑基本相同（“基本”的原因见 <code>c_char</code> 说明）。</p><p>具体可以参照以下例子：</p><div class="language-zig vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">zig</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">print</span><span style="color:#E1E4E8;"> = </span><span style="color:#79B8FF;">@import</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;std&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#FFAB70;">debug</span><span style="color:#E1E4E8;">.</span><span style="color:#FFAB70;">print</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">pub</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">char</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">u8</span><span style="color:#E1E4E8;"> = </span><span style="color:#9ECBFF;">&#39;h&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;{c}</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, .{</span><span style="color:#FFAB70;">char</span><span style="color:#E1E4E8;">});</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#E36209;">print</span><span style="color:#24292E;"> = </span><span style="color:#005CC5;">@import</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;std&quot;</span><span style="color:#24292E;">).</span><span style="color:#E36209;">debug</span><span style="color:#24292E;">.</span><span style="color:#E36209;">print</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">pub</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">fn</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> </span><span style="color:#E36209;">char</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">u8</span><span style="color:#24292E;"> = </span><span style="color:#032F62;">&#39;h&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;{c}</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, .{</span><span style="color:#E36209;">char</span><span style="color:#24292E;">});</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">🅿️ 提示</p><p>由于 char 本质就是 <code>u8</code> 类型，所以你可以使用 ASCII 码表的值来替换字符，例如 h 在表中对应的值是 104,那么以下，两种输出方式的结果应该是一样的。</p><div class="language-zig vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">zig</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">print</span><span style="color:#E1E4E8;"> = </span><span style="color:#79B8FF;">@import</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;std&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#FFAB70;">debug</span><span style="color:#E1E4E8;">.</span><span style="color:#FFAB70;">print</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">pub</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">char</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">u8</span><span style="color:#E1E4E8;"> = </span><span style="color:#9ECBFF;">&#39;h&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">char_num</span><span style="color:#E1E4E8;">:</span><span style="color:#F97583;">u8</span><span style="color:#E1E4E8;"> = </span><span style="color:#79B8FF;">104</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;{c}</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, .{</span><span style="color:#FFAB70;">char</span><span style="color:#E1E4E8;">});</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;{c}</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, .{</span><span style="color:#FFAB70;">char_num</span><span style="color:#E1E4E8;">});</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#E36209;">print</span><span style="color:#24292E;"> = </span><span style="color:#005CC5;">@import</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;std&quot;</span><span style="color:#24292E;">).</span><span style="color:#E36209;">debug</span><span style="color:#24292E;">.</span><span style="color:#E36209;">print</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">pub</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">fn</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> </span><span style="color:#E36209;">char</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">u8</span><span style="color:#24292E;"> = </span><span style="color:#032F62;">&#39;h&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> </span><span style="color:#E36209;">char_num</span><span style="color:#24292E;">:</span><span style="color:#D73A49;">u8</span><span style="color:#24292E;"> = </span><span style="color:#005CC5;">104</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;{c}</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, .{</span><span style="color:#E36209;">char</span><span style="color:#24292E;">});</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;{c}</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, .{</span><span style="color:#E36209;">char_num</span><span style="color:#24292E;">});</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div></div><details class="details custom-block"><summary>关于 <code>c_char</code></summary><p>你如果自行看了 zig 官方文档中关于类型的部分，应该会注意到 <code>c_char</code> 类型，它对应 C 中的 <code>char</code> 类型。</p><p>但是需要注意，<code>u8</code> 和 <code>c_char</code> 并不是全等的，因为 <code>c_char</code> 虽然是 8 位，但是它是否有符号取决于 target (目标机器)。</p></details><h2 id="布尔值" tabindex="-1">布尔值 <a class="header-anchor" href="#布尔值" aria-label="Permalink to &quot;布尔值&quot;">​</a></h2><blockquote><p>常用于流程控制</p></blockquote><p>在 zig 中，布尔值有两个，分别是 <code>true</code> 和 <code>false</code>， 它们在内存中占用的大小为1个字节。</p>`,11),e=[l];function c(t,r,E,y,i,d){return a(),n("div",null,e)}const h=s(o,[["render",c]]);export{u as __pageData,h as default};
