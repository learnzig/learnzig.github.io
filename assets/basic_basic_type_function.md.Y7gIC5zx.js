import{_ as s,o as a,c as n,R as o}from"./chunks/framework.XiqD54nH.js";const F=JSON.parse('{"title":"函数","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"basic/basic_type/function.md","filePath":"basic/basic_type/function.md","lastUpdated":1695038114000}'),p={name:"basic/basic_type/function.md"},l=o(`<h1 id="函数" tabindex="-1">函数 <a class="header-anchor" href="#函数" aria-label="Permalink to &quot;函数&quot;">​</a></h1><blockquote><p>函数是编程语言中最为基本的语句。</p></blockquote><p>zig 的函数明显，你可以一眼就看出来它的组成，我们来用一个简单的函数作为说明：</p><div class="language-zig vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">zig</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">pub</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">a</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">u8</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">b</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">u8</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">u8</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">a</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">b</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">pub</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">fn</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#E36209;">a</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">u8</span><span style="color:#24292E;">, </span><span style="color:#E36209;">b</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">u8</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">u8</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#E36209;">a</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#E36209;">b</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><blockquote><p>如果你有 C++ 的使用经验，一眼就可以看出来各自的作用。</p></blockquote><p>下面来进行说明：</p><ol><li><code>pub</code> 是访问修饰符，有且只有一个选择，那就是 <code>pub</code>，这代表着函数是公共可访问的（其他的文件import该文件后，可以直接使用这个函数）。</li><li><code>fn</code> 是关键字，代表着我们接下来定义了一个函数。</li><li><code>add</code> 是标识符，作为函数的名字。</li><li><code>a: u8</code> 是参数的标识符和类型，这里有两个参数，分别是 <code>a</code> 和 <code>b</code>，它们的类型均是 <code>u8</code>。</li><li><code>u8</code> 是函数的返回类型，在 zig 中，一个函数只能返回一个值。</li></ol><p>如果没有返回值，请使用 <code>void</code>。</p><div class="info custom-block"><p class="custom-block-title">🅿️ 提示</p><p>你可能注意到了有的函数定义是这样子的：</p><div class="language-zig vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">zig</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">max</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">comptime</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">T</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">type</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">a</span><span style="color:#E1E4E8;">: </span><span style="color:#FFAB70;">T</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">b</span><span style="color:#E1E4E8;">: </span><span style="color:#FFAB70;">T</span><span style="color:#E1E4E8;">) </span><span style="color:#FFAB70;">T</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">a</span><span style="color:#E1E4E8;"> &gt; </span><span style="color:#FFAB70;">b</span><span style="color:#E1E4E8;">) </span><span style="color:#FFAB70;">a</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">b</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">fn</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">max</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">comptime</span><span style="color:#24292E;"> </span><span style="color:#E36209;">T</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">type</span><span style="color:#24292E;">, </span><span style="color:#E36209;">a</span><span style="color:#24292E;">: </span><span style="color:#E36209;">T</span><span style="color:#24292E;">, </span><span style="color:#E36209;">b</span><span style="color:#24292E;">: </span><span style="color:#E36209;">T</span><span style="color:#24292E;">) </span><span style="color:#E36209;">T</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">a</span><span style="color:#24292E;"> &gt; </span><span style="color:#E36209;">b</span><span style="color:#24292E;">) </span><span style="color:#E36209;">a</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#E36209;">b</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>其中的 <code>comptime T: type</code> 你可能很陌生，这是编译期参数，它是用来实现鸭子类型（泛型）的关键语法！</p></div><details class="details custom-block"><summary>关于函数命名</summary><p>这里命名规则没什么强制性的要求，你只需要保证符合变量声明的 <a href="/basic/define-variable.html#标识符命名"><em>标识符规范</em></a> 即可。</p><p>如果你需要一个命名的推荐规则的话，可以参照 zig 源码的命名方式，它使用的是<a href="#">小驼峰命名法</a>。</p></details>`,10),e=[l];function c(t,r,E,y,i,d){return a(),n("div",null,e)}const b=s(p,[["render",c]]);export{F as __pageData,b as default};
