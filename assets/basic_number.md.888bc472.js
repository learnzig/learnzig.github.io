import{_ as t,o as s,c as a,Q as o}from"./chunks/framework.01af844e.js";const E=JSON.parse('{"title":"数值类型","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"basic/number.md","filePath":"basic/number.md"}'),e={name:"basic/number.md"},n=o(`<h1 id="数值类型" tabindex="-1">数值类型 <a class="header-anchor" href="#数值类型" aria-label="Permalink to &quot;数值类型&quot;">​</a></h1><h2 id="整数" tabindex="-1">整数 <a class="header-anchor" href="#整数" aria-label="Permalink to &quot;整数&quot;">​</a></h2><h3 id="类型" tabindex="-1">类型 <a class="header-anchor" href="#类型" aria-label="Permalink to &quot;类型&quot;">​</a></h3><p>在 zig 中，对整数的类型划分很详细，以下是类型表格：</p><table><thead><tr><th>类型</th><th>对应C类型</th><th>描述</th></tr></thead><tbody><tr><td><code>i8</code></td><td><code>int8_t</code></td><td>有符号8位整数</td></tr><tr><td><code>u8</code></td><td><code>uint8_t</code></td><td>无符号8位整数</td></tr><tr><td><code>i16</code></td><td><code>int16_t</code></td><td>有符号16位整数</td></tr><tr><td><code>u16</code></td><td><code>uint16_t</code></td><td>无符号16位整数</td></tr><tr><td><code>i32</code></td><td><code>int32_t</code></td><td>有符号32位整数</td></tr><tr><td><code>u32</code></td><td><code>uint32_t</code></td><td>无符号32位整数</td></tr><tr><td><code>i64</code></td><td><code>int64_t</code></td><td>有符号64位整数</td></tr><tr><td><code>u64</code></td><td><code>uint64_t</code></td><td>无符号64位整数</td></tr><tr><td><code>i128</code></td><td><code>__int128</code></td><td>有符号128位整数</td></tr><tr><td><code>u128</code></td><td><code>unsigned __int128</code></td><td>无符号128位整数</td></tr><tr><td><code>isize</code></td><td><code>intptr_t</code></td><td>有符号指针大小的整数</td></tr><tr><td><code>usize</code></td><td><code>uintptr_t</code> <code>size_t</code></td><td>无符号指针大小的整数</td></tr><tr><td><code>comptime_int</code></td><td>无</td><td>编译期的整数，整数字面量的类型</td></tr></tbody></table><div class="language-zig vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">zig</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 下划线可以放在数字之间作为视觉分隔符</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">one_billion</span><span style="color:#E1E4E8;"> = </span><span style="color:#79B8FF;">1_000_000_000</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">binary_mask</span><span style="color:#E1E4E8;"> = </span><span style="color:#79B8FF;">0b1_1111_1111</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">permissions</span><span style="color:#E1E4E8;"> = </span><span style="color:#79B8FF;">0o7_5_5</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">big_address</span><span style="color:#E1E4E8;"> = </span><span style="color:#79B8FF;">0xFF80_0000_0000_0000</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 下划线可以放在数字之间作为视觉分隔符</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#E36209;">one_billion</span><span style="color:#24292E;"> = </span><span style="color:#005CC5;">1_000_000_000</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#E36209;">binary_mask</span><span style="color:#24292E;"> = </span><span style="color:#005CC5;">0b1_1111_1111</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#E36209;">permissions</span><span style="color:#24292E;"> = </span><span style="color:#005CC5;">0o7_5_5</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#E36209;">big_address</span><span style="color:#24292E;"> = </span><span style="color:#005CC5;">0xFF80_0000_0000_0000</span><span style="color:#24292E;">;</span></span></code></pre></div><p>同时 zig 支持任意位宽的整数，使用u或者i后面加数字即可，例如 <code>i7</code> 代表有符号的7位整数，整数类型允许的最大位宽为<code>65535</code>。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><code>usize</code> 和 <code>isize</code> 这两种类型的的大小取决于，运行程序的目标计算器CPU的类型：32位CPU则两个类型均为32位，64位同理。</p></div><h3 id="不同进制" tabindex="-1">不同进制 <a class="header-anchor" href="#不同进制" aria-label="Permalink to &quot;不同进制&quot;">​</a></h3><p>你可以使用以下方式书写字面量：</p><table><thead><tr><th>字面量</th><th>示例</th></tr></thead><tbody><tr><td>十进制</td><td>98222</td></tr><tr><td>十六进制</td><td>0xff</td></tr><tr><td>八进制</td><td>0o755</td></tr><tr><td>二进制</td><td>0b11110000</td></tr></tbody></table><h3 id="溢出和除零" tabindex="-1">溢出和除零 <a class="header-anchor" href="#溢出和除零" aria-label="Permalink to &quot;溢出和除零&quot;">​</a></h3><p>TODO</p><h2 id="浮点数" tabindex="-1">浮点数 <a class="header-anchor" href="#浮点数" aria-label="Permalink to &quot;浮点数&quot;">​</a></h2><p>TODO</p>`,15),d=[n];function c(l,p,r,i,_,y){return s(),a("div",null,d)}const u=t(e,[["render",c]]);export{E as __pageData,u as default};
