import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.gI2xCOxE.js";const A=JSON.parse('{"title":"可选类型","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"basic/optional_type.md","filePath":"basic/optional_type.md","lastUpdated":1700327774000}'),p={name:"basic/optional_type.md"},o=l(`<h1 id="可选类型" tabindex="-1">可选类型 <a class="header-anchor" href="#可选类型" aria-label="Permalink to &quot;可选类型&quot;">​</a></h1><p>zig 在不损害效率和可读性的前提下提高代码安全性的一个方案就是可选类型，<code>?</code> 是可选类型的标志，你可以将它放在类型的前面，代表它的值是null或者这个类型。</p><div class="language-zig vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">zig</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 一个普通的i32整数</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">normal_int</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">i32</span><span style="color:#E1E4E8;"> = </span><span style="color:#79B8FF;">1234</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// i32的可选类型，现在它的值可以是 i32 或者 null</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">optional_int</span><span style="color:#E1E4E8;">: ?</span><span style="color:#F97583;">i32</span><span style="color:#E1E4E8;"> = </span><span style="color:#79B8FF;">5678</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 一个普通的i32整数</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#E36209;">normal_int</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">i32</span><span style="color:#24292E;"> = </span><span style="color:#005CC5;">1234</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// i32的可选类型，现在它的值可以是 i32 或者 null</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#E36209;">optional_int</span><span style="color:#24292E;">: ?</span><span style="color:#D73A49;">i32</span><span style="color:#24292E;"> = </span><span style="color:#005CC5;">5678</span><span style="color:#24292E;">;</span></span></code></pre></div><p>当然，可选类型在整数上没什么大用，更多是在指针上使用，null（空引用）是许多运行时异常的根源，甚至被指责为<a href="https://www.lucidchart.com/techblog/2015/08/31/the-worst-mistake-of-computer-science/" target="_blank" rel="noreferrer">计算机科学中最严重的错误</a>。</p><p>当然这在 zig 中不存在，通过可选类型我们可以解决这个问题，zig 在解决空指针上采取的方式比较保守，它兼顾了代码的可读性和效率问题。</p><p>其中目前最为激进的应该是 Rust ，它真的是非常的激进，这增加了程序员在写代码时的心智负担（因为你经常需要和编译期斗智斗勇，但好处大大是减少了你在运行时 debug 的负担）。相对来说，zig 采取的是一种折中的方案，编译期仍然会给你检测，并且这种检测不是很深奥，而且纠正起来很简单，缺点是并不能保证你的运行时是绝对安全的（可选类型仅仅能保证你不使用空指针，却不能保证你出现悬空指针【迷途指针、野指针】等情况的出现）。</p><p>zig 会将 null 特殊看待，并且保证你不会将一个可能为 null 的值赋值给一个不能是 null 的变量。</p><p>首先我们和 zig 的目标：C 对比一下，看一下两者在处理 null 上的区别，在接下来的代码中，我们尝试调用 <code>malloc</code>，并且申请一块内存：</p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-RBdRy" id="tab-zGhxSD_" checked="checked"><label for="tab-zGhxSD_">c</label><input type="radio" name="group-RBdRy" id="tab-ZwEQVQk"><label for="tab-ZwEQVQk">zig</label></div><div class="blocks"><div class="language-c vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 引用的是malloc的原型</span></span>
<span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#B392F0;">malloc</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">size_t</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">size</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> Foo </span><span style="color:#F97583;">*</span><span style="color:#B392F0;">do_a_thing</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">char</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">ptr </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">malloc</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1234</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">ptr) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">NULL</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 引用的是malloc的原型</span></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#6F42C1;">malloc</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">size_t</span><span style="color:#24292E;"> </span><span style="color:#E36209;">size</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> Foo </span><span style="color:#D73A49;">*</span><span style="color:#6F42C1;">do_a_thing</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">void</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">ptr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">malloc</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1234</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">ptr) </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">NULL</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><div class="language-zig vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">zig</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">extern</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">malloc</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">size</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">usize</span><span style="color:#E1E4E8;">) ?</span><span style="color:#F97583;">*u8</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">doAThing</span><span style="color:#E1E4E8;">() ?</span><span style="color:#F97583;">*</span><span style="color:#FFAB70;">Foo</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">ptr</span><span style="color:#E1E4E8;"> = </span><span style="color:#B392F0;">malloc</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1234</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">orelse</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">_</span><span style="color:#E1E4E8;"> = </span><span style="color:#FFAB70;">ptr</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">extern</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">fn</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">malloc</span><span style="color:#24292E;">(</span><span style="color:#E36209;">size</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">usize</span><span style="color:#24292E;">) ?</span><span style="color:#D73A49;">*u8</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">fn</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">doAThing</span><span style="color:#24292E;">() ?</span><span style="color:#D73A49;">*</span><span style="color:#E36209;">Foo</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#E36209;">ptr</span><span style="color:#24292E;"> = </span><span style="color:#6F42C1;">malloc</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1234</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">orelse</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">_</span><span style="color:#24292E;"> = </span><span style="color:#E36209;">ptr</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div></div></div><p>在这里，至少zig 看起来要比 c 好用，我们通过使用 <code>orelse</code> 关键字保证解构了可选类型，保证我们这里的 <code>ptr</code> 一定是一个可用的指针，否则的话我们直接会返回 <code>null</code>。</p><p>在 c 中，检查 <code>null</code> 你大概是这样处理的：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">do_a_thing</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> Foo </span><span style="color:#F97583;">*</span><span style="color:#FFAB70;">foo</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// do some stuff</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (foo) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">do_something_with_foo</span><span style="color:#E1E4E8;">(foo);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// do some stuff</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">do_a_thing</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> Foo </span><span style="color:#D73A49;">*</span><span style="color:#E36209;">foo</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// do some stuff</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (foo) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">do_something_with_foo</span><span style="color:#24292E;">(foo);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// do some stuff</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>而在 zig 中，我们可以这样处理：</p><div class="language-zig vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">zig</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">Foo</span><span style="color:#E1E4E8;"> = </span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;">{};</span></span>
<span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">doSomethingWithFoo</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">foo</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">*</span><span style="color:#FFAB70;">Foo</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> { </span><span style="color:#FFAB70;">_</span><span style="color:#E1E4E8;"> = </span><span style="color:#FFAB70;">foo</span><span style="color:#E1E4E8;">; }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">doAThing</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">optional_foo</span><span style="color:#E1E4E8;">: ?</span><span style="color:#F97583;">*</span><span style="color:#FFAB70;">Foo</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// do some stuff</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">optional_foo</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">|</span><span style="color:#FFAB70;">foo</span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">doSomethingWithFoo</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">foo</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// do some stuff</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#E36209;">Foo</span><span style="color:#24292E;"> = </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;">{};</span></span>
<span class="line"><span style="color:#D73A49;">fn</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">doSomethingWithFoo</span><span style="color:#24292E;">(</span><span style="color:#E36209;">foo</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">*</span><span style="color:#E36209;">Foo</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> { </span><span style="color:#E36209;">_</span><span style="color:#24292E;"> = </span><span style="color:#E36209;">foo</span><span style="color:#24292E;">; }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">fn</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">doAThing</span><span style="color:#24292E;">(</span><span style="color:#E36209;">optional_foo</span><span style="color:#24292E;">: ?</span><span style="color:#D73A49;">*</span><span style="color:#E36209;">Foo</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// do some stuff</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">optional_foo</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">|</span><span style="color:#E36209;">foo</span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">doSomethingWithFoo</span><span style="color:#24292E;">(</span><span style="color:#E36209;">foo</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// do some stuff</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>嗯。。。看起来可能没什么不同，不过在 zig 的这个块中保证了 <code>foo</code> 不是一个可选类型的指针，而是一个指针。</p><p>当然在 c 中你可以使用 <code>__attribute__((nonnull))</code> 来告诉 GCC 编译器这里不能是一个 null 。</p><h2 id="编译期反射访问可选类型" tabindex="-1">编译期反射访问可选类型 <a class="header-anchor" href="#编译期反射访问可选类型" aria-label="Permalink to &quot;编译期反射访问可选类型&quot;">​</a></h2><p>我们也可以通过编译期函数来实现反射进而访问可选类型：</p><div class="language-zig vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">zig</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">expect</span><span style="color:#E1E4E8;"> = </span><span style="color:#79B8FF;">@import</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;std&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#FFAB70;">testing</span><span style="color:#E1E4E8;">.</span><span style="color:#FFAB70;">expect</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">test</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;optional type&quot;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 定义一个可选类型并且赋值为null:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">foo</span><span style="color:#E1E4E8;">: ?</span><span style="color:#F97583;">i32</span><span style="color:#E1E4E8;"> = </span><span style="color:#F97583;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 赋值1234</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">foo</span><span style="color:#E1E4E8;"> = </span><span style="color:#79B8FF;">1234</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">comptime</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">expect</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">@typeInfo</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">@TypeOf</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">foo</span><span style="color:#E1E4E8;">)).</span><span style="color:#FFAB70;">Optional</span><span style="color:#E1E4E8;">.</span><span style="color:#FFAB70;">child</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">i32</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#E36209;">expect</span><span style="color:#24292E;"> = </span><span style="color:#005CC5;">@import</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;std&quot;</span><span style="color:#24292E;">).</span><span style="color:#E36209;">testing</span><span style="color:#24292E;">.</span><span style="color:#E36209;">expect</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">test</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;optional type&quot;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 定义一个可选类型并且赋值为null:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> </span><span style="color:#E36209;">foo</span><span style="color:#24292E;">: ?</span><span style="color:#D73A49;">i32</span><span style="color:#24292E;"> = </span><span style="color:#D73A49;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 赋值1234</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">foo</span><span style="color:#24292E;"> = </span><span style="color:#005CC5;">1234</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">comptime</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">expect</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">@typeInfo</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">@TypeOf</span><span style="color:#24292E;">(</span><span style="color:#E36209;">foo</span><span style="color:#24292E;">)).</span><span style="color:#E36209;">Optional</span><span style="color:#24292E;">.</span><span style="color:#E36209;">child</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">i32</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="可选指针" tabindex="-1">可选指针 <a class="header-anchor" href="#可选指针" aria-label="Permalink to &quot;可选指针&quot;">​</a></h2><p>可选指针会保证和指针有一样的大小，<code>null</code> 会被视作地址 0 考虑！</p>`,21),e=[o];function c(t,r,E,y,i,d){return n(),a("div",null,e)}const u=s(p,[["render",c]]);export{A as __pageData,u as default};
