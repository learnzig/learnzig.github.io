import{_ as s,o,c as a,Q as l}from"./chunks/framework.b2e9bf53.js";const h=JSON.parse('{"title":"Hello World","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"basic/hello-world.md","filePath":"basic/hello-world.md"}'),n={name:"basic/hello-world.md"},p=l(`<h1 id="hello-world" tabindex="-1">Hello World <a class="header-anchor" href="#hello-world" aria-label="Permalink to &quot;Hello World&quot;">​</a></h1><p>我相信你一定是从 <code>Hello, World!</code> 开始学习其他语言的，在这里我们也不例外，我们来通过一个简单的程序，来向 zig 的世界打一声招呼！</p><div class="language-zig vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">zig</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">std</span><span style="color:#E1E4E8;"> = </span><span style="color:#79B8FF;">@import</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;std&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">pub</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">std</span><span style="color:#E1E4E8;">.</span><span style="color:#FFAB70;">debug</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Hello, World!</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, .{});</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#E36209;">std</span><span style="color:#24292E;"> = </span><span style="color:#005CC5;">@import</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;std&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">pub</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">fn</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">std</span><span style="color:#24292E;">.</span><span style="color:#E36209;">debug</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Hello, World!</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, .{});</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><em>很简单，不是吗？</em></p><h2 id="说明" tabindex="-1">说明 <a class="header-anchor" href="#说明" aria-label="Permalink to &quot;说明&quot;">​</a></h2><p>以上程序中，我们先通过 <code>@import</code> 这个内置函数（在zig中有很多的内置函数，它们都以<code>@</code>开头，并且遵循<a href="#">小驼峰命名法</a>）引入了 zig 的标准库。</p><p>通过在 <code>main</code> 函数（程序默认是从此处开始执行，这是规定）中使用在标准库 <strong>debug</strong> 包中定义的 <code>print</code> 函数来输出语句 <em>Hello, World!</em></p><p><code>print</code> 函数接受两个参数，类似于 C 的 <code>printf</code> 函数，第一个参数是要格式化的字符串，第二个是参量表，这里我们需要说的是，格式化字符串使用的是<code>{}</code>， zig 会自动为我们根据后面的参量表推导出对应的类型，当 zig 无法推导时，我们需要显示声明要格式化的参量类型，例如字符串就是 <code>{s}</code>，整数就是 <code>{d}</code>， 更多的类型我们在后面会详细说明。我们传入的第二个参数是一个元组（<strong>tuple</strong>），它是一个元组（你可以把它看作是一个匿名结构体，这里你只需要知道一下就行）。</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>好了，上面的内容你应该已经看完了，现在我要告诉你，正常使用 zig 打印字符串是不能这样子做的！</p><p>你是不是觉得自己被耍了？别担心，上面仅仅只是一个示例而已，来为你演示一下 zig 的使用！</p></div>`,9),e=[p];function t(c,r,d,i,E,y){return o(),a("div",null,e)}const F=s(n,[["render",t]]);export{h as __pageData,F as default};
