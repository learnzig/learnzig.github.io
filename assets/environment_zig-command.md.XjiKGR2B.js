import{_ as i,o as s,c as a,R as e}from"./chunks/framework.aAAIvgLZ.js";const z=JSON.parse('{"title":"zig 命令","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"environment/zig-command.md","filePath":"environment/zig-command.md","lastUpdated":1701184803000}'),t={name:"environment/zig-command.md"},n=e('<h1 id="zig-命令" tabindex="-1"><code>zig</code> 命令 <a class="header-anchor" href="#zig-命令" aria-label="Permalink to &quot;`zig` 命令&quot;">​</a></h1><p>现在，我们已经安装了 zig ，也安装了对应的编辑器，接下来就了解一下基本的 <code>zig</code> 命令。</p><p>这单单一个命令可神了，它囊括了项目建立、构建、测试、运行，甚至你可以用它来部署你的项目，也可以用来给 C/C++ 作为编译或者依赖管理工具，非常的全面，这一切都是得益于 zig 本身的编译期。</p><p>以下仅列出常用的命令！</p><h2 id="zig-build" tabindex="-1"><code>zig build</code> <a class="header-anchor" href="#zig-build" aria-label="Permalink to &quot;`zig build`&quot;">​</a></h2><p>构建项目，会自动搜索当前目录及父目录的 <code>build.zig</code> 进行构建。</p><h2 id="zig-init-exe" tabindex="-1"><code>zig init-exe</code> <a class="header-anchor" href="#zig-init-exe" aria-label="Permalink to &quot;`zig init-exe`&quot;">​</a></h2><p>这个命令用于初始化项目（可执行二进制文件），在当前路径下创建 <code>src/main.zig</code> 和 <code>build.zig</code> 两个文件。</p><p>关于 <code>build.zig</code> 这个文件的内容涉及到了 zig 的构建系统，我们将会单独讲述。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">.</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build.zig</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">└──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> src</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    └──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> main.zig</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>当前 <code>nightly</code> 版本的 zig 已经将 <code>zig init-exe</code> 和 <code>zig init-lib</code> 合并为一个命令 <code>zig init</code>。</p></div><h2 id="zig-init-lib" tabindex="-1"><code>zig init-lib</code> <a class="header-anchor" href="#zig-init-lib" aria-label="Permalink to &quot;`zig init-lib`&quot;">​</a></h2><p>如果你想写一个 zig 的库，那么可以使用该命令，在当前路径下创建 <code>src/main.zig</code> 和 <code>build.zig</code> 两个文件。</p><div class="tip custom-block"><p class="custom-block-title">🅿️ 提示</p><p>创建出来的 <code>main.zig</code> <code>build.zig</code> 和通过 <code>init-exe</code> 命令创建出来的 <code>main.zig</code> <code>build.zig</code> 并不相同。</p></div><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">.</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build.zig</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">└──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> src</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    └──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> main.zig</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>当前 <code>nightly</code> 版本的 zig 已经将 <code>zig init-exe</code> 和 <code>zig init-lib</code> 合并为一个命令 <code>zig init</code>。</p></div><h2 id="zig-ast-check" tabindex="-1"><code>zig ast-check</code> <a class="header-anchor" href="#zig-ast-check" aria-label="Permalink to &quot;`zig ast-check`&quot;">​</a></h2><p>对指定文件进行AST语法检查，支持指定文件和标准输入。</p><h2 id="zig-fmt" tabindex="-1"><code>zig fmt</code> <a class="header-anchor" href="#zig-fmt" aria-label="Permalink to &quot;`zig fmt`&quot;">​</a></h2><p>用于格式化代码源文件，支持<code>stdin</code>和指定路径。</p><h2 id="zig-test" tabindex="-1"><code>zig test</code> <a class="header-anchor" href="#zig-test" aria-label="Permalink to &quot;`zig test`&quot;">​</a></h2><p>对指定的源文件运行test,适用于单元测试。</p><h2 id="zig-fetch" tabindex="-1"><code>zig fetch</code> <a class="header-anchor" href="#zig-fetch" aria-label="Permalink to &quot;`zig fetch`&quot;">​</a></h2><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>该命令为 <code>nightly</code> 版本加入，用于将包添加到全局缓存并打印包的hash。</p></div><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> zig</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> fetch</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://github.com/limine-bootloader/limine-zig/archive/trunk.tar.gz</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">12202809180bab2c7ae3382781b2fc65395e74b49d99ff2595f3fea9f7cf66cfa963</span></span></code></pre></div><p>当然如果你想将包直接添加到 <code>zon</code> 中，你可以附加 <code>--save</code> 参数来实现效果：</p><div class="language-zig vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">zig</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">zig</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> fetch</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> --</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">save</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> https</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//github.com/limine-bootloader/limine-zig/archive/trunk.tar.gz</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 当包提供 name 时，会自动使用包的 name</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 当然，你也可以指定包的 name，使用 --save=limine</span></span></code></pre></div>',27),l=[n];function c(d,h,o,p,g,k){return s(),a("div",null,l)}const b=i(t,[["render",c]]);export{z as __pageData,b as default};
