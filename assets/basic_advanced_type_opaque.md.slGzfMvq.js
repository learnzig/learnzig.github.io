import{_ as s,o as a,c as n,R as p}from"./chunks/framework.XiqD54nH.js";const _=JSON.parse('{"title":"opaque","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"basic/advanced_type/opaque.md","filePath":"basic/advanced_type/opaque.md","lastUpdated":1700737288000}'),o={name:"basic/advanced_type/opaque.md"},l=p(`<h1 id="opaque" tabindex="-1">opaque <a class="header-anchor" href="#opaque" aria-label="Permalink to &quot;opaque&quot;">​</a></h1><p><code>opaque {}</code> 类型声明一个具有未知（但非零）大小和对齐方式的新类型，它的内部可以包含与结构、联合和枚举相同的声明。</p><p>这通常用于与不公开结构详细信息的 C 代码交互时的类型安全。</p><div class="language-zig vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">zig</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">Derp</span><span style="color:#E1E4E8;"> = </span><span style="color:#F97583;">opaque</span><span style="color:#E1E4E8;"> {};</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">Wat</span><span style="color:#E1E4E8;"> = </span><span style="color:#F97583;">opaque</span><span style="color:#E1E4E8;"> {};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">extern</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">bar</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">d</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">*</span><span style="color:#FFAB70;">Derp</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">foo</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">w</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">*</span><span style="color:#FFAB70;">Wat</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">callconv</span><span style="color:#E1E4E8;">(.</span><span style="color:#FFAB70;">C</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">bar</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">w</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#E36209;">Derp</span><span style="color:#24292E;"> = </span><span style="color:#D73A49;">opaque</span><span style="color:#24292E;"> {};</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#E36209;">Wat</span><span style="color:#24292E;"> = </span><span style="color:#D73A49;">opaque</span><span style="color:#24292E;"> {};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">extern</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">fn</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">bar</span><span style="color:#24292E;">(</span><span style="color:#E36209;">d</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">*</span><span style="color:#E36209;">Derp</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">void</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">fn</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">foo</span><span style="color:#24292E;">(</span><span style="color:#E36209;">w</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">*</span><span style="color:#E36209;">Wat</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">callconv</span><span style="color:#24292E;">(.</span><span style="color:#E36209;">C</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">bar</span><span style="color:#24292E;">(</span><span style="color:#E36209;">w</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>TODO: 添加更多关于该类型使用的示例和说明！</p>`,5),e=[l];function t(c,r,E,y,i,d){return a(),n("div",null,e)}const u=s(o,[["render",t]]);export{_ as __pageData,u as default};
