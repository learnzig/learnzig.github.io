import{_ as s,o as n,c as a,Q as p}from"./chunks/framework.3bc20fd1.js";const B=JSON.parse('{"title":"切片","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"basic/advanced_type/silce.md","filePath":"basic/advanced_type/silce.md","lastUpdated":1695184889000}'),l={name:"basic/advanced_type/silce.md"},o=p(`<h1 id="切片" tabindex="-1">切片 <a class="header-anchor" href="#切片" aria-label="Permalink to &quot;切片&quot;">​</a></h1><p>切片和数组看起来上很像，在实际使用时，你可能会想要使用切片，因为它相对数组来说，要更加灵活！</p><p><em>你可以对数组、切片、数组指针进行切片操作！</em></p><p>接下来我们演示以下切片的使用方式：</p><div class="language-zig vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">zig</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">print</span><span style="color:#E1E4E8;"> = </span><span style="color:#79B8FF;">@import</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;std&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#FFAB70;">debug</span><span style="color:#E1E4E8;">.</span><span style="color:#FFAB70;">print</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">pub</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">!void</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">array</span><span style="color:#E1E4E8;"> = [</span><span style="color:#FFAB70;">_</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">i32</span><span style="color:#E1E4E8;">{ </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;"> };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">len</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">usize</span><span style="color:#E1E4E8;"> = </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">slice</span><span style="color:#E1E4E8;"> = </span><span style="color:#FFAB70;">array</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">..</span><span style="color:#FFAB70;">len</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">slice</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">..) </span><span style="color:#F97583;">|</span><span style="color:#FFAB70;">ele</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">index</span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;第{}个元素为：{}</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, .{ </span><span style="color:#FFAB70;">index</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">ele</span><span style="color:#E1E4E8;"> });</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;slice 类型为{}</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, .{</span><span style="color:#79B8FF;">@TypeOf</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">slice</span><span style="color:#E1E4E8;">)});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">slice_2</span><span style="color:#E1E4E8;"> = </span><span style="color:#FFAB70;">array</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">..</span><span style="color:#FFAB70;">array</span><span style="color:#E1E4E8;">.</span><span style="color:#FFAB70;">len</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;slice_2 类型为{}</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, .{</span><span style="color:#79B8FF;">@TypeOf</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">slice_2</span><span style="color:#E1E4E8;">)});</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#E36209;">print</span><span style="color:#24292E;"> = </span><span style="color:#005CC5;">@import</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;std&quot;</span><span style="color:#24292E;">).</span><span style="color:#E36209;">debug</span><span style="color:#24292E;">.</span><span style="color:#E36209;">print</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">pub</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">fn</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">!void</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> </span><span style="color:#E36209;">array</span><span style="color:#24292E;"> = [</span><span style="color:#E36209;">_</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">i32</span><span style="color:#24292E;">{ </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;"> };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> </span><span style="color:#E36209;">len</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">usize</span><span style="color:#24292E;"> = </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> </span><span style="color:#E36209;">slice</span><span style="color:#24292E;"> = </span><span style="color:#E36209;">array</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">..</span><span style="color:#E36209;">len</span><span style="color:#24292E;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">slice</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">..) </span><span style="color:#D73A49;">|</span><span style="color:#E36209;">ele</span><span style="color:#24292E;">, </span><span style="color:#E36209;">index</span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;第{}个元素为：{}</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, .{ </span><span style="color:#E36209;">index</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#E36209;">ele</span><span style="color:#24292E;"> });</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;slice 类型为{}</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, .{</span><span style="color:#005CC5;">@TypeOf</span><span style="color:#24292E;">(</span><span style="color:#E36209;">slice</span><span style="color:#24292E;">)});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> </span><span style="color:#E36209;">slice_2</span><span style="color:#24292E;"> = </span><span style="color:#E36209;">array</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">..</span><span style="color:#E36209;">array</span><span style="color:#24292E;">.</span><span style="color:#E36209;">len</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;slice_2 类型为{}</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, .{</span><span style="color:#005CC5;">@TypeOf</span><span style="color:#24292E;">(</span><span style="color:#E36209;">slice_2</span><span style="color:#24292E;">)});</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>打印结果如下：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">第1个元素为：1</span></span>
<span class="line"><span style="color:#B392F0;">第2个元素为：2</span></span>
<span class="line"><span style="color:#B392F0;">第3个元素为：3</span></span>
<span class="line"><span style="color:#B392F0;">slice</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">类型为[]i32</span></span>
<span class="line"><span style="color:#B392F0;">slice</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">类型为</span><span style="color:#79B8FF;">*</span><span style="color:#9ECBFF;">[</span><span style="color:#79B8FF;">4</span><span style="color:#9ECBFF;">]i32</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">第1个元素为：1</span></span>
<span class="line"><span style="color:#6F42C1;">第2个元素为：2</span></span>
<span class="line"><span style="color:#6F42C1;">第3个元素为：3</span></span>
<span class="line"><span style="color:#6F42C1;">slice</span><span style="color:#24292E;"> </span><span style="color:#032F62;">类型为[]i32</span></span>
<span class="line"><span style="color:#6F42C1;">slice</span><span style="color:#24292E;"> </span><span style="color:#032F62;">类型为</span><span style="color:#005CC5;">*</span><span style="color:#032F62;">[</span><span style="color:#005CC5;">4</span><span style="color:#032F62;">]i32</span></span></code></pre></div><p>切片的使用方式就是类似数组，不过<code>[]</code>中的是索引的边界值，遵循“左闭右开”规则。</p><p>以上我们对数组取切片，左边界值为0,右边界值为 <code>len</code> 变量。</p><p>注意，这里说的是边界值有一个是变量（运行时可知），如果两个边界值均是编译期可知的话，编译器会直接将切片优化为数组指针。</p><div class="info custom-block"><p class="custom-block-title">🅿️ 提示</p><p>切片的本质：它本质是一个胖指针，包含了一个 指针类型 <code>[*]T</code> 和 长度。</p><p>同时，它的指针 <code>slice.ptr</code> 和长度 <code>slice.len</code> 均是可以操作的，但在实践中，请不要操作它们，这容易破坏切片的内部结构（除非你有把握每次都能正确的处理它们）。</p></div><h2 id="切片指针" tabindex="-1">切片指针 <a class="header-anchor" href="#切片指针" aria-label="Permalink to &quot;切片指针&quot;">​</a></h2><p>切片本身除了具有 <code>len</code> 属性外，还具有 <code>ptr</code> 属性，这意味着我们可以通过语法 <code>slice.ptr</code> 来操作切片的指针，它是一个多项指针！</p><p>当我们对切片元素取地址（<code>&amp;</code>）时，得到的是单项指针。</p><p>同时，切片本身还有边界检查，但是对切片指针做操作则不会有边界检查！</p><div class="language-zig vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">zig</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">print</span><span style="color:#E1E4E8;"> = </span><span style="color:#79B8FF;">@import</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;std&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#FFAB70;">debug</span><span style="color:#E1E4E8;">.</span><span style="color:#FFAB70;">print</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">pub</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">!void</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">array</span><span style="color:#E1E4E8;"> = [</span><span style="color:#FFAB70;">_</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">i32</span><span style="color:#E1E4E8;">{ </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;"> };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 边界使用变量，保证切片不会被优化为数组指针</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">len</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">usize</span><span style="color:#E1E4E8;"> = </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">slice</span><span style="color:#E1E4E8;"> = </span><span style="color:#FFAB70;">array</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">..</span><span style="color:#FFAB70;">len</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;slice.ptr 类型为{}</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, .{</span><span style="color:#79B8FF;">@TypeOf</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">slice</span><span style="color:#E1E4E8;">.</span><span style="color:#FFAB70;">ptr</span><span style="color:#E1E4E8;">)});</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;slice 的索引 0 取地址，得到指针类型为{}</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, .{</span><span style="color:#79B8FF;">@TypeOf</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">&amp;</span><span style="color:#FFAB70;">slice</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">])});</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#E36209;">print</span><span style="color:#24292E;"> = </span><span style="color:#005CC5;">@import</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;std&quot;</span><span style="color:#24292E;">).</span><span style="color:#E36209;">debug</span><span style="color:#24292E;">.</span><span style="color:#E36209;">print</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">pub</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">fn</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">!void</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> </span><span style="color:#E36209;">array</span><span style="color:#24292E;"> = [</span><span style="color:#E36209;">_</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">i32</span><span style="color:#24292E;">{ </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;"> };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 边界使用变量，保证切片不会被优化为数组指针</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> </span><span style="color:#E36209;">len</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">usize</span><span style="color:#24292E;"> = </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> </span><span style="color:#E36209;">slice</span><span style="color:#24292E;"> = </span><span style="color:#E36209;">array</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">..</span><span style="color:#E36209;">len</span><span style="color:#24292E;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;slice.ptr 类型为{}</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, .{</span><span style="color:#005CC5;">@TypeOf</span><span style="color:#24292E;">(</span><span style="color:#E36209;">slice</span><span style="color:#24292E;">.</span><span style="color:#E36209;">ptr</span><span style="color:#24292E;">)});</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;slice 的索引 0 取地址，得到指针类型为{}</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, .{</span><span style="color:#005CC5;">@TypeOf</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">&amp;</span><span style="color:#E36209;">slice</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">])});</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="哨兵切片" tabindex="-1">哨兵切片 <a class="header-anchor" href="#哨兵切片" aria-label="Permalink to &quot;哨兵切片&quot;">​</a></h2><p>语法 <code>[:x]T</code> 是一个切片，它具有运行时已知的长度，并且还保证由该长度索引的元素的标记值。该类型不保证在此之前不存在哨兵元素，哨兵终止的切片允许元素访问 len 索引。</p><p>哨兵切片也可以使用切片语法 <code>data[start..end :x]</code> 的变体来创建，其中 data 是多项指针、数组或切片，x 是哨兵值。</p><p>哨兵切片认定哨兵位置处的元素是哨兵值，如果不是这种情况，则会触发安全保护中的未定义问题。</p><div class="language-zig vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">zig</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">print</span><span style="color:#E1E4E8;"> = </span><span style="color:#79B8FF;">@import</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;std&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#FFAB70;">debug</span><span style="color:#E1E4E8;">.</span><span style="color:#FFAB70;">print</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">pub</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">!void</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 显示声明切片类型</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">str_slice</span><span style="color:#E1E4E8;">: [:</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">u8</span><span style="color:#E1E4E8;"> = </span><span style="color:#9ECBFF;">&quot;hello&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;str_slice类型：{}</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, .{</span><span style="color:#79B8FF;">@TypeOf</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">str_slice</span><span style="color:#E1E4E8;">)});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">array</span><span style="color:#E1E4E8;"> = [</span><span style="color:#FFAB70;">_</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">u8</span><span style="color:#E1E4E8;">{ </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> };</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">runtime_length</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">usize</span><span style="color:#E1E4E8;"> = </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">slice</span><span style="color:#E1E4E8;"> = </span><span style="color:#FFAB70;">array</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">..</span><span style="color:#FFAB70;">runtime_length</span><span style="color:#E1E4E8;"> :</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;slice类型：{}</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, .{</span><span style="color:#79B8FF;">@TypeOf</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">slice</span><span style="color:#E1E4E8;">)});</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#E36209;">print</span><span style="color:#24292E;"> = </span><span style="color:#005CC5;">@import</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;std&quot;</span><span style="color:#24292E;">).</span><span style="color:#E36209;">debug</span><span style="color:#24292E;">.</span><span style="color:#E36209;">print</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">pub</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">fn</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">!void</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 显示声明切片类型</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#E36209;">str_slice</span><span style="color:#24292E;">: [:</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">u8</span><span style="color:#24292E;"> = </span><span style="color:#032F62;">&quot;hello&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;str_slice类型：{}</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, .{</span><span style="color:#005CC5;">@TypeOf</span><span style="color:#24292E;">(</span><span style="color:#E36209;">str_slice</span><span style="color:#24292E;">)});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> </span><span style="color:#E36209;">array</span><span style="color:#24292E;"> = [</span><span style="color:#E36209;">_</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">u8</span><span style="color:#24292E;">{ </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> };</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> </span><span style="color:#E36209;">runtime_length</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">usize</span><span style="color:#24292E;"> = </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#E36209;">slice</span><span style="color:#24292E;"> = </span><span style="color:#E36209;">array</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">..</span><span style="color:#E36209;">runtime_length</span><span style="color:#24292E;"> :</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;slice类型：{}</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, .{</span><span style="color:#005CC5;">@TypeOf</span><span style="color:#24292E;">(</span><span style="color:#E36209;">slice</span><span style="color:#24292E;">)});</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div>`,21),e=[o];function c(t,r,E,y,F,i){return n(),a("div",null,e)}const d=s(l,[["render",c]]);export{B as __pageData,d as default};
