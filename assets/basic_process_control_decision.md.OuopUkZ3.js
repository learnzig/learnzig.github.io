import{_ as s,o as a,c as n,R as l}from"./chunks/framework.XiqD54nH.js";const u=JSON.parse('{"title":"条件","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"basic/process_control/decision.md","filePath":"basic/process_control/decision.md","lastUpdated":1700371678000}'),p={name:"basic/process_control/decision.md"},o=l(`<h1 id="条件" tabindex="-1">条件 <a class="header-anchor" href="#条件" aria-label="Permalink to &quot;条件&quot;">​</a></h1><blockquote><p>在 zig 中，<code>if</code> 这个语法的作用可就大了！</p></blockquote><p>像基础的 <code>if</code>，<code>if else</code>，<code>else if</code> 我们就不说了，直接看例子：</p><div class="language-zig vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">zig</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">print</span><span style="color:#E1E4E8;"> = </span><span style="color:#79B8FF;">@import</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;std&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#FFAB70;">debug</span><span style="color:#E1E4E8;">.</span><span style="color:#FFAB70;">print</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">pub</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">!void</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">num</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">u8</span><span style="color:#E1E4E8;"> = </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">num</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;num is 1</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, .{});</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">num</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;num is 2</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, .{});</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;num is other</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, .{});</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#E36209;">print</span><span style="color:#24292E;"> = </span><span style="color:#005CC5;">@import</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;std&quot;</span><span style="color:#24292E;">).</span><span style="color:#E36209;">debug</span><span style="color:#24292E;">.</span><span style="color:#E36209;">print</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">pub</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">fn</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">!void</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> </span><span style="color:#E36209;">num</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">u8</span><span style="color:#24292E;"> = </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">num</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;num is 1</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, .{});</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">num</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;num is 2</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, .{});</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;num is other</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, .{});</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="三元表达式" tabindex="-1">三元表达式 <a class="header-anchor" href="#三元表达式" aria-label="Permalink to &quot;三元表达式&quot;">​</a></h2><p>zig 中的三元表达式是通过 <code>if else</code> 来实现的：</p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-Vg_If" id="tab-9cMSjMV" checked="checked"><label for="tab-9cMSjMV">default</label><input type="radio" name="group-Vg_If" id="tab-Ydakot5"><label for="tab-Ydakot5">more</label></div><div class="blocks"><div class="language-zig vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">zig</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">a</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">u32</span><span style="color:#E1E4E8;"> = </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">b</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">u32</span><span style="color:#E1E4E8;"> = </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">result</span><span style="color:#E1E4E8;"> = </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">a</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">b</span><span style="color:#E1E4E8;">) </span><span style="color:#79B8FF;">47</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3089</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#E36209;">a</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">u32</span><span style="color:#24292E;"> = </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#E36209;">b</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">u32</span><span style="color:#24292E;"> = </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#E36209;">result</span><span style="color:#24292E;"> = </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">a</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#E36209;">b</span><span style="color:#24292E;">) </span><span style="color:#005CC5;">47</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3089</span><span style="color:#24292E;">;</span></span></code></pre></div><div class="language-zig vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">zig</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">print</span><span style="color:#E1E4E8;"> = </span><span style="color:#79B8FF;">@import</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;std&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#FFAB70;">debug</span><span style="color:#E1E4E8;">.</span><span style="color:#FFAB70;">print</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">pub</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">!void</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">a</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">u32</span><span style="color:#E1E4E8;"> = </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">b</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">u32</span><span style="color:#E1E4E8;"> = </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">result</span><span style="color:#E1E4E8;"> = </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">a</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">b</span><span style="color:#E1E4E8;">) </span><span style="color:#79B8FF;">47</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3089</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;result is {}</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, .{</span><span style="color:#FFAB70;">result</span><span style="color:#E1E4E8;">});</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#E36209;">print</span><span style="color:#24292E;"> = </span><span style="color:#005CC5;">@import</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;std&quot;</span><span style="color:#24292E;">).</span><span style="color:#E36209;">debug</span><span style="color:#24292E;">.</span><span style="color:#E36209;">print</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">pub</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">fn</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">!void</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#E36209;">a</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">u32</span><span style="color:#24292E;"> = </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#E36209;">b</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">u32</span><span style="color:#24292E;"> = </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#E36209;">result</span><span style="color:#24292E;"> = </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">a</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#E36209;">b</span><span style="color:#24292E;">) </span><span style="color:#005CC5;">47</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3089</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;result is {}</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, .{</span><span style="color:#E36209;">result</span><span style="color:#24292E;">});</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div></div></div><h2 id="高级用法" tabindex="-1">高级用法 <a class="header-anchor" href="#高级用法" aria-label="Permalink to &quot;高级用法&quot;">​</a></h2><p>以下内容涉及到了<a href="/basic/union.html">联合类型</a>和<a href="/basic/optional_type.html">可选类型</a>，你可以在阅读完这两章节后再回来学习。</p><h3 id="解构可选类型" tabindex="-1">解构可选类型 <a class="header-anchor" href="#解构可选类型" aria-label="Permalink to &quot;解构可选类型&quot;">​</a></h3><p>事实上，解构可选类型操作很简单：</p><div class="language-zig vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">zig</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">b</span><span style="color:#E1E4E8;">: ?</span><span style="color:#F97583;">u32</span><span style="color:#E1E4E8;"> = </span><span style="color:#F97583;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">b</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">|</span><span style="color:#FFAB70;">real_b</span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">unreachable</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">expect</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">true</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#E36209;">b</span><span style="color:#24292E;">: ?</span><span style="color:#D73A49;">u32</span><span style="color:#24292E;"> = </span><span style="color:#D73A49;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">b</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">|</span><span style="color:#E36209;">real_b</span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">unreachable</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">expect</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">true</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>以上代码的 <code>else</code> 分支并非必要，我们结构后获得 <code>real_b</code> 就是 <code>u32</code> 类型，但是注意我们获得的捕获是只读的！</p><p>如果我们想操纵值的内容，可以选择捕获对应的指针：</p><div class="language-zig vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">zig</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">c</span><span style="color:#E1E4E8;">: ?</span><span style="color:#F97583;">u32</span><span style="color:#E1E4E8;"> = </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">c</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">|*</span><span style="color:#FFAB70;">value</span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">value</span><span style="color:#E1E4E8;">.</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> = </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> </span><span style="color:#E36209;">c</span><span style="color:#24292E;">: ?</span><span style="color:#D73A49;">u32</span><span style="color:#24292E;"> = </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">c</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">|*</span><span style="color:#E36209;">value</span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">value</span><span style="color:#24292E;">.</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> = </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><code>*</code> 运算符就表示我们选择捕获这个值对应的指针，因此我们可以通过操控指针来修改其值。</p><h3 id="解构错误联合类型" tabindex="-1">解构错误联合类型 <a class="header-anchor" href="#解构错误联合类型" aria-label="Permalink to &quot;解构错误联合类型&quot;">​</a></h3><p>解构错误联合类型类似与解构可选类型：</p><div class="language-zig vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">zig</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">a</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">anyerror!u32</span><span style="color:#E1E4E8;"> = </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">a</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">|</span><span style="color:#FFAB70;">value</span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">expect</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">value</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#FFAB70;">err</span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">_</span><span style="color:#E1E4E8;"> = </span><span style="color:#FFAB70;">err</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">unreachable</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#E36209;">a</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">anyerror!u32</span><span style="color:#24292E;"> = </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">a</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">|</span><span style="color:#E36209;">value</span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">expect</span><span style="color:#24292E;">(</span><span style="color:#E36209;">value</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#E36209;">err</span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">_</span><span style="color:#24292E;"> = </span><span style="color:#E36209;">err</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">unreachable</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>以上代码中 <code>value</code> 类型为 <code>u32</code>，else 分支捕获的是错误，即 <code>err</code> 的类型将会是 <code>anyerror</code>，这是由我们之前显式声明的，否则将会是由编译器推导的。</p><p>为了仅检测错误，我们可以这样做：</p><div class="language-zig vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">zig</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">b</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">|</span><span style="color:#FFAB70;">_</span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> {} </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#FFAB70;">err</span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">expect</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">err</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">error</span><span style="color:#E1E4E8;">.</span><span style="color:#FFAB70;">BadValue</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">b</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">|</span><span style="color:#E36209;">_</span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> {} </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#E36209;">err</span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">expect</span><span style="color:#24292E;">(</span><span style="color:#E36209;">err</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">error</span><span style="color:#24292E;">.</span><span style="color:#E36209;">BadValue</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>同样支持捕获指针来操作值：</p><div class="language-zig vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">zig</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">c</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">anyerror!u32</span><span style="color:#E1E4E8;"> = </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">c</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">|*</span><span style="color:#FFAB70;">value</span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">value</span><span style="color:#E1E4E8;">.</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> = </span><span style="color:#79B8FF;">9</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#FFAB70;">_</span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">unreachable</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> </span><span style="color:#E36209;">c</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">anyerror!u32</span><span style="color:#24292E;"> = </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">c</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">|*</span><span style="color:#E36209;">value</span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">value</span><span style="color:#24292E;">.</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> = </span><span style="color:#005CC5;">9</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#E36209;">_</span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">unreachable</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>那么 if 是如何解构错误联合可选类型的呢？</p><p>答案是 if 会先尝试解构错误联合类型，再解构可选类型：</p><div class="language-zig vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">zig</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">a</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">anyerror!</span><span style="color:#E1E4E8;">?</span><span style="color:#F97583;">u32</span><span style="color:#E1E4E8;"> = </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">a</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">|</span><span style="color:#FFAB70;">optional_value</span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">expect</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">optional_value</span><span style="color:#E1E4E8;">.? </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#FFAB70;">err</span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">_</span><span style="color:#E1E4E8;"> = </span><span style="color:#FFAB70;">err</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">unreachable</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#E36209;">a</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">anyerror!</span><span style="color:#24292E;">?</span><span style="color:#D73A49;">u32</span><span style="color:#24292E;"> = </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">a</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">|</span><span style="color:#E36209;">optional_value</span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">expect</span><span style="color:#24292E;">(</span><span style="color:#E36209;">optional_value</span><span style="color:#24292E;">.? </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#E36209;">err</span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">_</span><span style="color:#24292E;"> = </span><span style="color:#E36209;">err</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">unreachable</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>以上代码中的 <code>optional_value</code> 就是可选类型 <code>?u32</code>，我们可以在内部继续使用 if 来解构它。</p><p>在错误联合可选类型上也可以使用指针捕获：</p><div class="language-zig vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">zig</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">d</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">anyerror!</span><span style="color:#E1E4E8;">?</span><span style="color:#F97583;">u32</span><span style="color:#E1E4E8;"> = </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">d</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">|*</span><span style="color:#FFAB70;">optional_value</span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">optional_value</span><span style="color:#E1E4E8;">.</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">|*</span><span style="color:#FFAB70;">value</span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#FFAB70;">value</span><span style="color:#E1E4E8;">.</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> = </span><span style="color:#79B8FF;">9</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#FFAB70;">_</span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">unreachable</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> </span><span style="color:#E36209;">d</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">anyerror!</span><span style="color:#24292E;">?</span><span style="color:#D73A49;">u32</span><span style="color:#24292E;"> = </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">d</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">|*</span><span style="color:#E36209;">optional_value</span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">optional_value</span><span style="color:#24292E;">.</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">|*</span><span style="color:#E36209;">value</span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#E36209;">value</span><span style="color:#24292E;">.</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> = </span><span style="color:#005CC5;">9</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#E36209;">_</span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">unreachable</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>以上代码中，<code>*optional_value</code> 捕获的是可选类型的指针，我们在内部尝试解引用后再一次捕获指针来进行操作。</p></div>`,25),e=[o];function c(t,r,E,y,i,F){return a(),n("div",null,e)}const A=s(p,[["render",c]]);export{u as __pageData,A as default};
