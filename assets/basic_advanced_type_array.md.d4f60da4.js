import{_ as s,o as n,c as a,Q as p}from"./chunks/framework.4313453f.js";const u=JSON.parse('{"title":"数组","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"basic/advanced_type/array.md","filePath":"basic/advanced_type/array.md","lastUpdated":1695110436000}'),l={name:"basic/advanced_type/array.md"},o=p(`<h1 id="数组" tabindex="-1">数组 <a class="header-anchor" href="#数组" aria-label="Permalink to &quot;数组&quot;">​</a></h1><p>数组是日常敲代码使用相当频繁的类型之一，在 zig 中，数组的分配和 C 类似，均是在内存中连续分配且固定数量的相同类型元素。</p><p>因此数组有以下三点特性：</p><ul><li>长度固定</li><li>元素必须有相同的类型</li><li>依次线性排列</li></ul><h2 id="创建数组" tabindex="-1">创建数组 <a class="header-anchor" href="#创建数组" aria-label="Permalink to &quot;创建数组&quot;">​</a></h2><p>在 zig 中，你可以使用以下的方法，来声明并定义一个数组：</p><div class="language-zig vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">zig</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">print</span><span style="color:#E1E4E8;"> = </span><span style="color:#79B8FF;">@import</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;std&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#FFAB70;">debug</span><span style="color:#E1E4E8;">.</span><span style="color:#FFAB70;">print</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">pub</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">!void</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">message</span><span style="color:#E1E4E8;"> = [</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">u8</span><span style="color:#E1E4E8;">{ </span><span style="color:#9ECBFF;">&#39;h&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;e&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;l&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;l&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;o&#39;</span><span style="color:#E1E4E8;"> };</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// const message = [_]u8{ &#39;h&#39;, &#39;e&#39;, &#39;l&#39;, &#39;l&#39;, &#39;o&#39; };</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;{s}</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, .{</span><span style="color:#FFAB70;">message</span><span style="color:#E1E4E8;">}); </span><span style="color:#6A737D;">// hello</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;{s}</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, .{</span><span style="color:#FFAB70;">message</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">]}); </span><span style="color:#6A737D;">// h</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#E36209;">print</span><span style="color:#24292E;"> = </span><span style="color:#005CC5;">@import</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;std&quot;</span><span style="color:#24292E;">).</span><span style="color:#E36209;">debug</span><span style="color:#24292E;">.</span><span style="color:#E36209;">print</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">pub</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">fn</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">!void</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#E36209;">message</span><span style="color:#24292E;"> = [</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">u8</span><span style="color:#24292E;">{ </span><span style="color:#032F62;">&#39;h&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;e&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;l&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;l&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;o&#39;</span><span style="color:#24292E;"> };</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// const message = [_]u8{ &#39;h&#39;, &#39;e&#39;, &#39;l&#39;, &#39;l&#39;, &#39;o&#39; };</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;{s}</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, .{</span><span style="color:#E36209;">message</span><span style="color:#24292E;">}); </span><span style="color:#6A737D;">// hello</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;{s}</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, .{</span><span style="color:#E36209;">message</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">]}); </span><span style="color:#6A737D;">// h</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>以上代码展示了定义一个字面量数组的方式，其中你可以选择指明数组的大小或者使用 <code>_</code> 代替。使用 <code>_</code> 时，zig 会尝试自动计算数组的长度。</p><p>数组元素是连续放置的，故我们可以使用下标来访问数组的元素，下标索引从 <code>0</code> 开始！</p><p>关于<a href="https://ziglang.org/documentation/0.11.0/#Index-out-of-Bounds" target="_blank" rel="noreferrer">越界问题</a>，zig 在编译期和运行时均有完整的越界保护和完善的堆栈错误跟踪。</p><h3 id="多维数组" tabindex="-1">多维数组 <a class="header-anchor" href="#多维数组" aria-label="Permalink to &quot;多维数组&quot;">​</a></h3><p>多维数组（矩阵）实际上就是嵌套数组，我们很容易就可以创建一个多维数组出来：</p><div class="language-zig vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">zig</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">print</span><span style="color:#E1E4E8;"> = </span><span style="color:#79B8FF;">@import</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;std&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#FFAB70;">debug</span><span style="color:#E1E4E8;">.</span><span style="color:#FFAB70;">print</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">pub</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">!void</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">matrix_4x4</span><span style="color:#E1E4E8;"> = [</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">][</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">f32</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">        [</span><span style="color:#FFAB70;">_</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">f32</span><span style="color:#E1E4E8;">{ </span><span style="color:#79B8FF;">1.0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0.0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0.0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0.0</span><span style="color:#E1E4E8;"> },</span></span>
<span class="line"><span style="color:#E1E4E8;">        [</span><span style="color:#FFAB70;">_</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">f32</span><span style="color:#E1E4E8;">{ </span><span style="color:#79B8FF;">0.0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1.0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0.0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1.0</span><span style="color:#E1E4E8;"> },</span></span>
<span class="line"><span style="color:#E1E4E8;">        [</span><span style="color:#FFAB70;">_</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">f32</span><span style="color:#E1E4E8;">{ </span><span style="color:#79B8FF;">0.0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0.0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1.0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0.0</span><span style="color:#E1E4E8;"> },</span></span>
<span class="line"><span style="color:#E1E4E8;">        [</span><span style="color:#FFAB70;">_</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">f32</span><span style="color:#E1E4E8;">{ </span><span style="color:#79B8FF;">0.0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0.0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0.0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1.0</span><span style="color:#E1E4E8;"> },</span></span>
<span class="line"><span style="color:#E1E4E8;">    };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">matrix_4x4</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">..) </span><span style="color:#F97583;">|</span><span style="color:#FFAB70;">arr_val</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">arr_index</span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">arr_val</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">..) </span><span style="color:#F97583;">|</span><span style="color:#FFAB70;">val</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">index</span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;元素{}-{}是: {}</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, .{ </span><span style="color:#FFAB70;">arr_index</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">index</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">val</span><span style="color:#E1E4E8;"> });</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#E36209;">print</span><span style="color:#24292E;"> = </span><span style="color:#005CC5;">@import</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;std&quot;</span><span style="color:#24292E;">).</span><span style="color:#E36209;">debug</span><span style="color:#24292E;">.</span><span style="color:#E36209;">print</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">pub</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">fn</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">!void</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#E36209;">matrix_4x4</span><span style="color:#24292E;"> = [</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">][</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">f32</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">        [</span><span style="color:#E36209;">_</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">f32</span><span style="color:#24292E;">{ </span><span style="color:#005CC5;">1.0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0.0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0.0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0.0</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">        [</span><span style="color:#E36209;">_</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">f32</span><span style="color:#24292E;">{ </span><span style="color:#005CC5;">0.0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1.0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0.0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1.0</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">        [</span><span style="color:#E36209;">_</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">f32</span><span style="color:#24292E;">{ </span><span style="color:#005CC5;">0.0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0.0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1.0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0.0</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">        [</span><span style="color:#E36209;">_</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">f32</span><span style="color:#24292E;">{ </span><span style="color:#005CC5;">0.0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0.0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0.0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1.0</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">    };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">matrix_4x4</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">..) </span><span style="color:#D73A49;">|</span><span style="color:#E36209;">arr_val</span><span style="color:#24292E;">, </span><span style="color:#E36209;">arr_index</span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">arr_val</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">..) </span><span style="color:#D73A49;">|</span><span style="color:#E36209;">val</span><span style="color:#24292E;">, </span><span style="color:#E36209;">index</span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;元素{}-{}是: {}</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, .{ </span><span style="color:#E36209;">arr_index</span><span style="color:#24292E;">, </span><span style="color:#E36209;">index</span><span style="color:#24292E;">, </span><span style="color:#E36209;">val</span><span style="color:#24292E;"> });</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在以上的示例中，我们使用了 <a href="/basic/process_control/loop.html">for</a> 循环，来进行矩阵的打印，关于循环我们放在后面再聊。</p><h2 id="哨兵数组" tabindex="-1">哨兵数组 <a class="header-anchor" href="#哨兵数组" aria-label="Permalink to &quot;哨兵数组&quot;">​</a></h2><blockquote><p>很抱歉，这里的名字是根据官方的文档直接翻译过来的，原文档应该是 (<a href="https://ziglang.org/documentation/0.11.0/#toc-Sentinel-Terminated-Arrays" target="_blank" rel="noreferrer">Sentinel-Terminated Arrays</a>) 。</p></blockquote><p>我们使用语法 <code>[N:x]T</code> 来描述一个元素为类型 <code>T</code>，长度为 <code>N</code> 的数组，在它对应 <code>N</code> 的索引处的值应该是 <code>x</code>。前面的说法可能比较复杂，换种说法，就是这个语法表示数组的长度索引处的元素应该是 <code>x</code>，具体可以看下面的示例：</p><div class="language-zig vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">zig</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">print</span><span style="color:#E1E4E8;"> = </span><span style="color:#79B8FF;">@import</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;std&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#FFAB70;">debug</span><span style="color:#E1E4E8;">.</span><span style="color:#FFAB70;">print</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">pub</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">!void</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">array</span><span style="color:#E1E4E8;"> = [</span><span style="color:#FFAB70;">_</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">u8</span><span style="color:#E1E4E8;">{ </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;"> };</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;数组长度为: {}</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, .{</span><span style="color:#FFAB70;">array</span><span style="color:#E1E4E8;">.</span><span style="color:#FFAB70;">len</span><span style="color:#E1E4E8;">}); </span><span style="color:#6A737D;">// 4</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;数组最后一个元素值: {}</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, .{</span><span style="color:#FFAB70;">array</span><span style="color:#E1E4E8;">[</span><span style="color:#FFAB70;">array</span><span style="color:#E1E4E8;">.</span><span style="color:#FFAB70;">len</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">]}); </span><span style="color:#6A737D;">// 4</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;哨兵值为: {}</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, .{</span><span style="color:#FFAB70;">array</span><span style="color:#E1E4E8;">[</span><span style="color:#FFAB70;">array</span><span style="color:#E1E4E8;">.</span><span style="color:#FFAB70;">len</span><span style="color:#E1E4E8;">]}); </span><span style="color:#6A737D;">// 0</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#E36209;">print</span><span style="color:#24292E;"> = </span><span style="color:#005CC5;">@import</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;std&quot;</span><span style="color:#24292E;">).</span><span style="color:#E36209;">debug</span><span style="color:#24292E;">.</span><span style="color:#E36209;">print</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">pub</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">fn</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">!void</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#E36209;">array</span><span style="color:#24292E;"> = [</span><span style="color:#E36209;">_</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">u8</span><span style="color:#24292E;">{ </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;"> };</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;数组长度为: {}</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, .{</span><span style="color:#E36209;">array</span><span style="color:#24292E;">.</span><span style="color:#E36209;">len</span><span style="color:#24292E;">}); </span><span style="color:#6A737D;">// 4</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;数组最后一个元素值: {}</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, .{</span><span style="color:#E36209;">array</span><span style="color:#24292E;">[</span><span style="color:#E36209;">array</span><span style="color:#24292E;">.</span><span style="color:#E36209;">len</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]}); </span><span style="color:#6A737D;">// 4</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;哨兵值为: {}</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, .{</span><span style="color:#E36209;">array</span><span style="color:#24292E;">[</span><span style="color:#E36209;">array</span><span style="color:#24292E;">.</span><span style="color:#E36209;">len</span><span style="color:#24292E;">]}); </span><span style="color:#6A737D;">// 0</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">🅿️ 提示</p><p>注意：只有在使用哨兵时，数组才会有索引为数组长度的元素！</p></div><h2 id="操作" tabindex="-1">操作 <a class="header-anchor" href="#操作" aria-label="Permalink to &quot;操作&quot;">​</a></h2><h3 id="乘法" tabindex="-1">乘法 <a class="header-anchor" href="#乘法" aria-label="Permalink to &quot;乘法&quot;">​</a></h3><p>可以使用 <code>**</code> 对数组做乘法操作，运算符左侧是数组，右侧是倍数，进行矩阵的叠加。</p><div class="language-zig vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">zig</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">print</span><span style="color:#E1E4E8;"> = </span><span style="color:#79B8FF;">@import</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;std&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#FFAB70;">debug</span><span style="color:#E1E4E8;">.</span><span style="color:#FFAB70;">print</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">pub</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">!void</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">small</span><span style="color:#E1E4E8;"> = [</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">i8</span><span style="color:#E1E4E8;">{ </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;"> };</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">big</span><span style="color:#E1E4E8;">: [</span><span style="color:#79B8FF;">9</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">i8</span><span style="color:#E1E4E8;"> = </span><span style="color:#FFAB70;">small</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">**</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;{any}</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, .{</span><span style="color:#FFAB70;">big</span><span style="color:#E1E4E8;">});</span><span style="color:#6A737D;">// [9]i8{ 1, 2, 3, 1, 2, 3, 1, 2, 3 }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#E36209;">print</span><span style="color:#24292E;"> = </span><span style="color:#005CC5;">@import</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;std&quot;</span><span style="color:#24292E;">).</span><span style="color:#E36209;">debug</span><span style="color:#24292E;">.</span><span style="color:#E36209;">print</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">pub</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">fn</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">!void</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#E36209;">small</span><span style="color:#24292E;"> = [</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">i8</span><span style="color:#24292E;">{ </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;"> };</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#E36209;">big</span><span style="color:#24292E;">: [</span><span style="color:#005CC5;">9</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">i8</span><span style="color:#24292E;"> = </span><span style="color:#E36209;">small</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">**</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;{any}</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, .{</span><span style="color:#E36209;">big</span><span style="color:#24292E;">});</span><span style="color:#6A737D;">// [9]i8{ 1, 2, 3, 1, 2, 3, 1, 2, 3 }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="串联" tabindex="-1">串联 <a class="header-anchor" href="#串联" aria-label="Permalink to &quot;串联&quot;">​</a></h3><p>数组之间可以使用 <code>++</code> 进行串联操作（编译期），只要两个数组类型（长度、元素类型）相同，它们就可以串联！</p><div class="language-zig vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">zig</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">print</span><span style="color:#E1E4E8;"> = </span><span style="color:#79B8FF;">@import</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;std&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#FFAB70;">debug</span><span style="color:#E1E4E8;">.</span><span style="color:#FFAB70;">print</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">pub</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">!void</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">part_one</span><span style="color:#E1E4E8;"> = [</span><span style="color:#FFAB70;">_</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">i32</span><span style="color:#E1E4E8;">{ </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;"> };</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">part_two</span><span style="color:#E1E4E8;"> = [</span><span style="color:#FFAB70;">_</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">i32</span><span style="color:#E1E4E8;">{ </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">6</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">7</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">8</span><span style="color:#E1E4E8;"> };</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">all_of_it</span><span style="color:#E1E4E8;"> = </span><span style="color:#FFAB70;">part_one</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">part_two</span><span style="color:#E1E4E8;">;</span><span style="color:#6A737D;">// [_]i32{ 1, 2, 3, 4, 5, 6, 7, 8 }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">_</span><span style="color:#E1E4E8;"> = </span><span style="color:#FFAB70;">all_of_it</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#E36209;">print</span><span style="color:#24292E;"> = </span><span style="color:#005CC5;">@import</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;std&quot;</span><span style="color:#24292E;">).</span><span style="color:#E36209;">debug</span><span style="color:#24292E;">.</span><span style="color:#E36209;">print</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">pub</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">fn</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">!void</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#E36209;">part_one</span><span style="color:#24292E;"> = [</span><span style="color:#E36209;">_</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">i32</span><span style="color:#24292E;">{ </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;"> };</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#E36209;">part_two</span><span style="color:#24292E;"> = [</span><span style="color:#E36209;">_</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">i32</span><span style="color:#24292E;">{ </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">6</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">7</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">8</span><span style="color:#24292E;"> };</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#E36209;">all_of_it</span><span style="color:#24292E;"> = </span><span style="color:#E36209;">part_one</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">++</span><span style="color:#24292E;"> </span><span style="color:#E36209;">part_two</span><span style="color:#24292E;">;</span><span style="color:#6A737D;">// [_]i32{ 1, 2, 3, 4, 5, 6, 7, 8 }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">_</span><span style="color:#24292E;"> = </span><span style="color:#E36209;">all_of_it</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="字符串" tabindex="-1">字符串 <a class="header-anchor" href="#字符串" aria-label="Permalink to &quot;字符串&quot;">​</a></h2><p>我们放在这里讲解字符串，为什么呢？</p><blockquote><p>在 zig 中，字符串是没有独立的类型的，它就是 <code>u8</code> 的数组类型，而且是哨兵字符为 0(<code>null</code>) 的哨兵数组！</p></blockquote><p>zig 会将字符串假定为 UTF-8 编码，这是由于 zig 的源文件本身就是 UTF-8 编码的，任何的非 ASCII 字节均会被作为 UTF-8 字符看待。编译器还不会对字节进行修改，因此如果想把非 UTF-8 字节放入字符串中，可以使用转义 <code>\\xNN</code>。</p><p>Unicode 码点字面量类型是 <code>comptime_int</code>，所有的转义字符均可以在字符串和 Unicode 码点中使用。</p><p>为了方便处理 UTF-8 和 Unicode ，zig的标准库 <code>std.unicode</code> 中实现了相关的函数来处理它们。</p><p>可以参照以下示例：</p><div class="language-zig vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">zig</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">print</span><span style="color:#E1E4E8;"> = </span><span style="color:#79B8FF;">@import</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;std&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#FFAB70;">debug</span><span style="color:#E1E4E8;">.</span><span style="color:#FFAB70;">print</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">mem</span><span style="color:#E1E4E8;"> = </span><span style="color:#79B8FF;">@import</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;std&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#FFAB70;">mem</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// 用于比较字节</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">pub</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">bytes</span><span style="color:#E1E4E8;"> = </span><span style="color:#9ECBFF;">&quot;hello&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;{}</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, .{</span><span style="color:#79B8FF;">@TypeOf</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">bytes</span><span style="color:#E1E4E8;">)});                   </span><span style="color:#6A737D;">// *const [5:0]u8</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;{d}</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, .{</span><span style="color:#FFAB70;">bytes</span><span style="color:#E1E4E8;">.</span><span style="color:#FFAB70;">len</span><span style="color:#E1E4E8;">});                       </span><span style="color:#6A737D;">// 5</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;{c}</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, .{</span><span style="color:#FFAB70;">bytes</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">]});                        </span><span style="color:#6A737D;">// &#39;e&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;{d}</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, .{</span><span style="color:#FFAB70;">bytes</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">]});                        </span><span style="color:#6A737D;">// 0</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;{}</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, .{</span><span style="color:#9ECBFF;">&#39;e&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;\\x65&#39;</span><span style="color:#E1E4E8;">});                    </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;{d}</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, .{&#39;\\</span><span style="color:#FFAB70;">u</span><span style="color:#E1E4E8;">{</span><span style="color:#79B8FF;">1f4a9</span><span style="color:#E1E4E8;">}&#39;});                     </span><span style="color:#6A737D;">// 128169</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;{d}</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, .{</span><span style="color:#9ECBFF;">&#39;💯&#39;</span><span style="color:#E1E4E8;">});                            </span><span style="color:#6A737D;">// 128175</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;{u}</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, .{</span><span style="color:#9ECBFF;">&#39;⚡&#39;</span><span style="color:#E1E4E8;">});</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;{}</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, .{</span><span style="color:#FFAB70;">mem</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">eql</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">u8</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;hello&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;h</span><span style="color:#79B8FF;">\\x65</span><span style="color:#9ECBFF;">llo&quot;</span><span style="color:#E1E4E8;">)});      </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;{}</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, .{</span><span style="color:#FFAB70;">mem</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">eql</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">u8</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;💯&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">\\xf0\\x9f\\x92\\xaf</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">)}); </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">invalid_utf8</span><span style="color:#E1E4E8;"> = </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">\\xff\\xfe</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">;      </span><span style="color:#6A737D;">// 非UTF-8 字符串可以使用\\xNN.</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;0x{x}</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, .{</span><span style="color:#FFAB70;">invalid_utf8</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">]}); </span><span style="color:#6A737D;">// 索引它们会返回独立的字节</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;0x{x}</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, .{</span><span style="color:#9ECBFF;">&quot;💯&quot;</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">]});</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#E36209;">print</span><span style="color:#24292E;"> = </span><span style="color:#005CC5;">@import</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;std&quot;</span><span style="color:#24292E;">).</span><span style="color:#E36209;">debug</span><span style="color:#24292E;">.</span><span style="color:#E36209;">print</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#E36209;">mem</span><span style="color:#24292E;"> = </span><span style="color:#005CC5;">@import</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;std&quot;</span><span style="color:#24292E;">).</span><span style="color:#E36209;">mem</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 用于比较字节</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">pub</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">fn</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#E36209;">bytes</span><span style="color:#24292E;"> = </span><span style="color:#032F62;">&quot;hello&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;{}</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, .{</span><span style="color:#005CC5;">@TypeOf</span><span style="color:#24292E;">(</span><span style="color:#E36209;">bytes</span><span style="color:#24292E;">)});                   </span><span style="color:#6A737D;">// *const [5:0]u8</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;{d}</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, .{</span><span style="color:#E36209;">bytes</span><span style="color:#24292E;">.</span><span style="color:#E36209;">len</span><span style="color:#24292E;">});                       </span><span style="color:#6A737D;">// 5</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;{c}</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, .{</span><span style="color:#E36209;">bytes</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]});                        </span><span style="color:#6A737D;">// &#39;e&#39;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;{d}</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, .{</span><span style="color:#E36209;">bytes</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">]});                        </span><span style="color:#6A737D;">// 0</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;{}</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, .{</span><span style="color:#032F62;">&#39;e&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;\\x65&#39;</span><span style="color:#24292E;">});                    </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;{d}</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, .{&#39;\\</span><span style="color:#E36209;">u</span><span style="color:#24292E;">{</span><span style="color:#005CC5;">1f4a9</span><span style="color:#24292E;">}&#39;});                     </span><span style="color:#6A737D;">// 128169</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;{d}</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, .{</span><span style="color:#032F62;">&#39;💯&#39;</span><span style="color:#24292E;">});                            </span><span style="color:#6A737D;">// 128175</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;{u}</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, .{</span><span style="color:#032F62;">&#39;⚡&#39;</span><span style="color:#24292E;">});</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;{}</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, .{</span><span style="color:#E36209;">mem</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">eql</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">u8</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;hello&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;h</span><span style="color:#005CC5;">\\x65</span><span style="color:#032F62;">llo&quot;</span><span style="color:#24292E;">)});      </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;{}</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, .{</span><span style="color:#E36209;">mem</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">eql</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">u8</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;💯&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">\\xf0\\x9f\\x92\\xaf</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">)}); </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#E36209;">invalid_utf8</span><span style="color:#24292E;"> = </span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">\\xff\\xfe</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">;      </span><span style="color:#6A737D;">// 非UTF-8 字符串可以使用\\xNN.</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;0x{x}</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, .{</span><span style="color:#E36209;">invalid_utf8</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]}); </span><span style="color:#6A737D;">// 索引它们会返回独立的字节</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;0x{x}</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, .{</span><span style="color:#032F62;">&quot;💯&quot;</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]});</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="转义字符" tabindex="-1">转义字符 <a class="header-anchor" href="#转义字符" aria-label="Permalink to &quot;转义字符&quot;">​</a></h3><table><thead><tr><th>转义字符</th><th>含义</th></tr></thead><tbody><tr><td><code>\\n</code></td><td>换行</td></tr><tr><td><code>\\r</code></td><td>回车</td></tr><tr><td><code>\\t</code></td><td>制表符 Tab</td></tr><tr><td><code>\\\\</code></td><td>反斜杠 |</td></tr><tr><td><code>\\&#39;</code></td><td>单引号</td></tr><tr><td><code>\\&quot;</code></td><td>双引号</td></tr><tr><td><code>\\xNN</code></td><td>十六进制八位字节值，2 位</td></tr><tr><td><code>\\u{NNNNNN}</code></td><td>十六进制 Unicode 码点 UTF-8 编码，1 位或者多位</td></tr></tbody></table><h3 id="多行字符串" tabindex="-1">多行字符串 <a class="header-anchor" href="#多行字符串" aria-label="Permalink to &quot;多行字符串&quot;">​</a></h3><p>如果要使用多行字符串，可以使用 <code>\\\\</code>，多行字符串没有转义，行尾不会包含在字符串中（换行符号）。示例如下：</p><div class="language-zig vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">zig</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">print</span><span style="color:#E1E4E8;"> = </span><span style="color:#79B8FF;">@import</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;std&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#FFAB70;">debug</span><span style="color:#E1E4E8;">.</span><span style="color:#FFAB70;">print</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">pub</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">!void</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">hello_world_in_c</span><span style="color:#E1E4E8;"> =</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">\\\\#include &lt;stdio.h&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">\\\\</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">\\\\int main(int argc, char **argv) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">\\\\    printf(&quot;hello world\\n&quot;);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">\\\\    return 0;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">\\\\}</span></span>
<span class="line"><span style="color:#E1E4E8;">    ;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;{s}</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, .{</span><span style="color:#FFAB70;">hello_world_in_c</span><span style="color:#E1E4E8;">});</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#E36209;">print</span><span style="color:#24292E;"> = </span><span style="color:#005CC5;">@import</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;std&quot;</span><span style="color:#24292E;">).</span><span style="color:#E36209;">debug</span><span style="color:#24292E;">.</span><span style="color:#E36209;">print</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">pub</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">fn</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">!void</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#E36209;">hello_world_in_c</span><span style="color:#24292E;"> =</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">\\\\#include &lt;stdio.h&gt;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">\\\\</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">\\\\int main(int argc, char **argv) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">\\\\    printf(&quot;hello world\\n&quot;);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">\\\\    return 0;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">\\\\}</span></span>
<span class="line"><span style="color:#24292E;">    ;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;{s}</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, .{</span><span style="color:#E36209;">hello_world_in_c</span><span style="color:#24292E;">});</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="奇技淫巧" tabindex="-1">奇技淫巧 <a class="header-anchor" href="#奇技淫巧" aria-label="Permalink to &quot;奇技淫巧&quot;">​</a></h2><p>受益于 zig 自身的语言特性，我们可以实现某些其他语言所不具备的方式来操作数组。</p><h3 id="使用函数初始化数组" tabindex="-1">使用函数初始化数组 <a class="header-anchor" href="#使用函数初始化数组" aria-label="Permalink to &quot;使用函数初始化数组&quot;">​</a></h3><p>可以使用函数来初始化数组，函数要求返回一个数组的元素或者一个数组。</p><div class="language-zig vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">zig</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">print</span><span style="color:#E1E4E8;"> = </span><span style="color:#79B8FF;">@import</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;std&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#FFAB70;">debug</span><span style="color:#E1E4E8;">.</span><span style="color:#FFAB70;">print</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">pub</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">!void</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">array</span><span style="color:#E1E4E8;"> = [</span><span style="color:#FFAB70;">_</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">i32</span><span style="color:#E1E4E8;">{</span><span style="color:#B392F0;">make</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">)} </span><span style="color:#F97583;">**</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;{any}</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, .{</span><span style="color:#FFAB70;">array</span><span style="color:#E1E4E8;">});</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">make</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">x</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">i32</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">i32</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">x</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#E36209;">print</span><span style="color:#24292E;"> = </span><span style="color:#005CC5;">@import</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;std&quot;</span><span style="color:#24292E;">).</span><span style="color:#E36209;">debug</span><span style="color:#24292E;">.</span><span style="color:#E36209;">print</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">pub</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">fn</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">!void</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> </span><span style="color:#E36209;">array</span><span style="color:#24292E;"> = [</span><span style="color:#E36209;">_</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">i32</span><span style="color:#24292E;">{</span><span style="color:#6F42C1;">make</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">)} </span><span style="color:#D73A49;">**</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;{any}</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, .{</span><span style="color:#E36209;">array</span><span style="color:#24292E;">});</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">fn</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">make</span><span style="color:#24292E;">(</span><span style="color:#E36209;">x</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">i32</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">i32</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#E36209;">x</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="编译期初始化数组" tabindex="-1">编译期初始化数组 <a class="header-anchor" href="#编译期初始化数组" aria-label="Permalink to &quot;编译期初始化数组&quot;">​</a></h3><p>通过编译期来初始化数组，以此来抵消运行时的开销！</p><div class="language-zig vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">zig</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">print</span><span style="color:#E1E4E8;"> = </span><span style="color:#79B8FF;">@import</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;std&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#FFAB70;">debug</span><span style="color:#E1E4E8;">.</span><span style="color:#FFAB70;">print</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">pub</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">!void</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">fancy_array</span><span style="color:#E1E4E8;"> = </span><span style="color:#FFAB70;">init</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">initial_value</span><span style="color:#E1E4E8;">: [</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">usize</span><span style="color:#E1E4E8;"> = </span><span style="color:#F97583;">undefined</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">&amp;</span><span style="color:#FFAB70;">initial_value</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">..) </span><span style="color:#F97583;">|*</span><span style="color:#FFAB70;">pt</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">i</span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#FFAB70;">pt</span><span style="color:#E1E4E8;">.</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> = </span><span style="color:#FFAB70;">i</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;"> :</span><span style="color:#FFAB70;">init</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">initial_value</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    };</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;{any}</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, .{</span><span style="color:#FFAB70;">fancy_array</span><span style="color:#E1E4E8;">});</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#E36209;">print</span><span style="color:#24292E;"> = </span><span style="color:#005CC5;">@import</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;std&quot;</span><span style="color:#24292E;">).</span><span style="color:#E36209;">debug</span><span style="color:#24292E;">.</span><span style="color:#E36209;">print</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">pub</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">fn</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">!void</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> </span><span style="color:#E36209;">fancy_array</span><span style="color:#24292E;"> = </span><span style="color:#E36209;">init</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> </span><span style="color:#E36209;">initial_value</span><span style="color:#24292E;">: [</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">usize</span><span style="color:#24292E;"> = </span><span style="color:#D73A49;">undefined</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">&amp;</span><span style="color:#E36209;">initial_value</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">..) </span><span style="color:#D73A49;">|*</span><span style="color:#E36209;">pt</span><span style="color:#24292E;">, </span><span style="color:#E36209;">i</span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#E36209;">pt</span><span style="color:#24292E;">.</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> = </span><span style="color:#E36209;">i</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">break</span><span style="color:#24292E;"> :</span><span style="color:#E36209;">init</span><span style="color:#24292E;"> </span><span style="color:#E36209;">initial_value</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    };</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;{any}</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, .{</span><span style="color:#E36209;">fancy_array</span><span style="color:#24292E;">});</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这个示例中，我们使用了编译期的功能，来帮助我们实现这个数组的初始化，同时还利用了 <code>blocks</code> 和 <code>break</code> 的性质，关于这个我们会在 <a href="/basic/process_control/loop.html">循环</a> 讲解！</p>`,48),e=[o];function t(c,r,E,y,F,i){return n(),a("div",null,e)}const C=s(l,[["render",t]]);export{u as __pageData,C as default};
